/*
 * OpenHolidays API v1
 *
 * Open Data API for public and school holidays
 *
 * OpenAPI spec version: v1
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System.Collections.ObjectModel;
using OpenHolidaysApi.Client;
using OpenHolidaysApi.Model;
using RestSharp;

namespace OpenHolidaysApi.Api;

/// <summary>
///     Represents a collection of functions to interact with the API endpoints
/// </summary>
public interface IHolidaysApi : IApiAccessor
{
    #region Synchronous Operations

    /// <summary>
    ///     Returns a list of public holidays from all countries for a given date.
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="date">Date of interest</param>
    /// <param name="languageIsoCode">ISO-639-1 code of a language or empty (optional)</param>
    /// <returns>List&lt;HolidayByDateResponse&gt;</returns>
    List<HolidayByDateResponse> PublicHolidaysByDateGet(DateTime? date, string languageIsoCode = null);

    /// <summary>
    ///     Returns a list of public holidays from all countries for a given date.
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="date">Date of interest</param>
    /// <param name="languageIsoCode">ISO-639-1 code of a language or empty (optional)</param>
    /// <returns>ApiResponse of List&lt;HolidayByDateResponse&gt;</returns>
    ApiResponse<List<HolidayByDateResponse>> PublicHolidaysByDateGetWithHttpInfo(DateTime? date,
        string languageIsoCode = null);

    /// <summary>
    ///     Returns list of public holidays for a given country
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="countryIsoCode">ISO 3166-1 code of the country</param>
    /// <param name="validFrom">Start of the date range</param>
    /// <param name="validTo">End of the date range</param>
    /// <param name="languageIsoCode">ISO-639-1 code of a language or empty (optional)</param>
    /// <param name="subdivisionCode">Code of the subdivision or empty (optional)</param>
    /// <returns>List&lt;HolidayResponse&gt;</returns>
    List<HolidayResponse> PublicHolidaysGet(string countryIsoCode, DateTime? validFrom, DateTime? validTo,
        string languageIsoCode = null, string subdivisionCode = null);

    /// <summary>
    ///     Returns list of public holidays for a given country
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="countryIsoCode">ISO 3166-1 code of the country</param>
    /// <param name="validFrom">Start of the date range</param>
    /// <param name="validTo">End of the date range</param>
    /// <param name="languageIsoCode">ISO-639-1 code of a language or empty (optional)</param>
    /// <param name="subdivisionCode">Code of the subdivision or empty (optional)</param>
    /// <returns>ApiResponse of List&lt;HolidayResponse&gt;</returns>
    ApiResponse<List<HolidayResponse>> PublicHolidaysGetWithHttpInfo(string countryIsoCode, DateTime? validFrom,
        DateTime? validTo, string languageIsoCode = null, string subdivisionCode = null);

    /// <summary>
    ///     Returns a list of school holidays from all countries for a given date.
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="date">Date of interest</param>
    /// <param name="languageIsoCode">ISO-639-1 code of a language or empty (optional)</param>
    /// <returns>List&lt;HolidayByDateResponse&gt;</returns>
    List<HolidayByDateResponse> SchoolHolidaysByDateGet(DateTime? date, string languageIsoCode = null);

    /// <summary>
    ///     Returns a list of school holidays from all countries for a given date.
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="date">Date of interest</param>
    /// <param name="languageIsoCode">ISO-639-1 code of a language or empty (optional)</param>
    /// <returns>ApiResponse of List&lt;HolidayByDateResponse&gt;</returns>
    ApiResponse<List<HolidayByDateResponse>> SchoolHolidaysByDateGetWithHttpInfo(DateTime? date,
        string languageIsoCode = null);

    /// <summary>
    ///     Returns list of official school holidays for a given country
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="countryIsoCode">ISO 3166-1 code of the country</param>
    /// <param name="validFrom">Start of the date range</param>
    /// <param name="validTo">End of the date range</param>
    /// <param name="languageIsoCode">ISO-639-1 code of a language or empty (optional)</param>
    /// <param name="subdivisionCode">Code of the subdivision or empty (optional)</param>
    /// <returns>List&lt;HolidayResponse&gt;</returns>
    List<HolidayResponse> SchoolHolidaysGet(string countryIsoCode, DateTime? validFrom, DateTime? validTo,
        string languageIsoCode = null, string subdivisionCode = null);

    /// <summary>
    ///     Returns list of official school holidays for a given country
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="countryIsoCode">ISO 3166-1 code of the country</param>
    /// <param name="validFrom">Start of the date range</param>
    /// <param name="validTo">End of the date range</param>
    /// <param name="languageIsoCode">ISO-639-1 code of a language or empty (optional)</param>
    /// <param name="subdivisionCode">Code of the subdivision or empty (optional)</param>
    /// <returns>ApiResponse of List&lt;HolidayResponse&gt;</returns>
    ApiResponse<List<HolidayResponse>> SchoolHolidaysGetWithHttpInfo(string countryIsoCode, DateTime? validFrom,
        DateTime? validTo, string languageIsoCode = null, string subdivisionCode = null);

    #endregion Synchronous Operations

    #region Asynchronous Operations

    /// <summary>
    ///     Returns a list of public holidays from all countries for a given date.
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="date">Date of interest</param>
    /// <param name="languageIsoCode">ISO-639-1 code of a language or empty (optional)</param>
    /// <returns>Task of List&lt;HolidayByDateResponse&gt;</returns>
    Task<List<HolidayByDateResponse>> PublicHolidaysByDateGetAsync(DateTime? date, string languageIsoCode = null);

    /// <summary>
    ///     Returns a list of public holidays from all countries for a given date.
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="date">Date of interest</param>
    /// <param name="languageIsoCode">ISO-639-1 code of a language or empty (optional)</param>
    /// <returns>Task of ApiResponse (List&lt;HolidayByDateResponse&gt;)</returns>
    Task<ApiResponse<List<HolidayByDateResponse>>> PublicHolidaysByDateGetAsyncWithHttpInfo(DateTime? date,
        string languageIsoCode = null);

    /// <summary>
    ///     Returns list of public holidays for a given country
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="countryIsoCode">ISO 3166-1 code of the country</param>
    /// <param name="validFrom">Start of the date range</param>
    /// <param name="validTo">End of the date range</param>
    /// <param name="languageIsoCode">ISO-639-1 code of a language or empty (optional)</param>
    /// <param name="subdivisionCode">Code of the subdivision or empty (optional)</param>
    /// <returns>Task of List&lt;HolidayResponse&gt;</returns>
    Task<List<HolidayResponse>> PublicHolidaysGetAsync(string countryIsoCode, DateTime? validFrom, DateTime? validTo,
        string languageIsoCode = null, string subdivisionCode = null);

    /// <summary>
    ///     Returns list of public holidays for a given country
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="countryIsoCode">ISO 3166-1 code of the country</param>
    /// <param name="validFrom">Start of the date range</param>
    /// <param name="validTo">End of the date range</param>
    /// <param name="languageIsoCode">ISO-639-1 code of a language or empty (optional)</param>
    /// <param name="subdivisionCode">Code of the subdivision or empty (optional)</param>
    /// <returns>Task of ApiResponse (List&lt;HolidayResponse&gt;)</returns>
    Task<ApiResponse<List<HolidayResponse>>> PublicHolidaysGetAsyncWithHttpInfo(string countryIsoCode,
        DateTime? validFrom, DateTime? validTo, string languageIsoCode = null, string subdivisionCode = null);

    /// <summary>
    ///     Returns a list of school holidays from all countries for a given date.
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="date">Date of interest</param>
    /// <param name="languageIsoCode">ISO-639-1 code of a language or empty (optional)</param>
    /// <returns>Task of List&lt;HolidayByDateResponse&gt;</returns>
    Task<List<HolidayByDateResponse>> SchoolHolidaysByDateGetAsync(DateTime? date, string languageIsoCode = null);

    /// <summary>
    ///     Returns a list of school holidays from all countries for a given date.
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="date">Date of interest</param>
    /// <param name="languageIsoCode">ISO-639-1 code of a language or empty (optional)</param>
    /// <returns>Task of ApiResponse (List&lt;HolidayByDateResponse&gt;)</returns>
    Task<ApiResponse<List<HolidayByDateResponse>>> SchoolHolidaysByDateGetAsyncWithHttpInfo(DateTime? date,
        string languageIsoCode = null);

    /// <summary>
    ///     Returns list of official school holidays for a given country
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="countryIsoCode">ISO 3166-1 code of the country</param>
    /// <param name="validFrom">Start of the date range</param>
    /// <param name="validTo">End of the date range</param>
    /// <param name="languageIsoCode">ISO-639-1 code of a language or empty (optional)</param>
    /// <param name="subdivisionCode">Code of the subdivision or empty (optional)</param>
    /// <returns>Task of List&lt;HolidayResponse&gt;</returns>
    Task<List<HolidayResponse>> SchoolHolidaysGetAsync(string countryIsoCode, DateTime? validFrom, DateTime? validTo,
        string languageIsoCode = null, string subdivisionCode = null);

    /// <summary>
    ///     Returns list of official school holidays for a given country
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="countryIsoCode">ISO 3166-1 code of the country</param>
    /// <param name="validFrom">Start of the date range</param>
    /// <param name="validTo">End of the date range</param>
    /// <param name="languageIsoCode">ISO-639-1 code of a language or empty (optional)</param>
    /// <param name="subdivisionCode">Code of the subdivision or empty (optional)</param>
    /// <returns>Task of ApiResponse (List&lt;HolidayResponse&gt;)</returns>
    Task<ApiResponse<List<HolidayResponse>>> SchoolHolidaysGetAsyncWithHttpInfo(string countryIsoCode,
        DateTime? validFrom, DateTime? validTo, string languageIsoCode = null, string subdivisionCode = null);

    #endregion Asynchronous Operations
}

/// <summary>
///     Represents a collection of functions to interact with the API endpoints
/// </summary>
public class HolidaysApi : IHolidaysApi
{
    private ExceptionFactory _exceptionFactory = (name, response) => null;

    /// <summary>
    ///     Initializes a new instance of the <see cref="HolidaysApi" /> class.
    /// </summary>
    /// <returns></returns>
    public HolidaysApi(string basePath)
    {
        Configuration = new Configuration { BasePath = basePath };

        ExceptionFactory = Configuration.DefaultExceptionFactory;
    }

    /// <summary>
    ///     Initializes a new instance of the <see cref="HolidaysApi" /> class
    /// </summary>
    /// <returns></returns>
    public HolidaysApi()
    {
        Configuration = Configuration.Default;

        ExceptionFactory = Configuration.DefaultExceptionFactory;
    }

    /// <summary>
    ///     Initializes a new instance of the <see cref="HolidaysApi" /> class
    ///     using Configuration object
    /// </summary>
    /// <param name="configuration">An instance of Configuration</param>
    /// <returns></returns>
    public HolidaysApi(Configuration configuration = null)
    {
        if (configuration == null) // use the default one in Configuration
            Configuration = Configuration.Default;
        else
            Configuration = configuration;

        ExceptionFactory = Configuration.DefaultExceptionFactory;
    }

    /// <summary>
    ///     Gets the base path of the API client.
    /// </summary>
    /// <value>The base path</value>
    public string GetBasePath()
    {
        return Configuration.ApiClient.RestClient.Options.BaseUrl.ToString();
    }

    /// <summary>
    ///     Gets or sets the configuration object
    /// </summary>
    /// <value>An instance of the Configuration</value>
    public Configuration Configuration { get; set; }

    /// <summary>
    ///     Provides a factory method hook for the creation of exceptions.
    /// </summary>
    public ExceptionFactory ExceptionFactory
    {
        get
        {
            if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
            return _exceptionFactory;
        }
        set => _exceptionFactory = value;
    }

    /// <summary>
    ///     Returns a list of public holidays from all countries for a given date.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="date">Date of interest</param>
    /// <param name="languageIsoCode">ISO-639-1 code of a language or empty (optional)</param>
    /// <returns>List&lt;HolidayByDateResponse&gt;</returns>
    public List<HolidayByDateResponse> PublicHolidaysByDateGet(DateTime? date, string languageIsoCode = null)
    {
        ApiResponse<List<HolidayByDateResponse>> localVarResponse =
            PublicHolidaysByDateGetWithHttpInfo(date, languageIsoCode);
        return localVarResponse.Data;
    }

    /// <summary>
    ///     Returns a list of public holidays from all countries for a given date.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="date">Date of interest</param>
    /// <param name="languageIsoCode">ISO-639-1 code of a language or empty (optional)</param>
    /// <returns>ApiResponse of List&lt;HolidayByDateResponse&gt;</returns>
    public ApiResponse<List<HolidayByDateResponse>> PublicHolidaysByDateGetWithHttpInfo(DateTime? date,
        string languageIsoCode = null)
    {
        // verify the required parameter 'date' is set
        if (date == null)
            throw new ApiException(400,
                "Missing required parameter 'date' when calling HolidaysApi->PublicHolidaysByDateGet");

        var localVarPath = "/PublicHolidaysByDate";
        var localVarPathParams = new Dictionary<string, string>();
        var localVarQueryParams = new List<KeyValuePair<string, string>>();
        var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
        var localVarFormParams = new Dictionary<string, string>();
        var localVarFileParams = new Dictionary<string, FileParameter>();
        object localVarPostBody = null;

        // to determine the Content-Type header
        string[] localVarHttpContentTypes = new string[]
        {
        };
        var localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

        // to determine the Accept header
        string[] localVarHttpHeaderAccepts = new[]
        {
            "application/json",
            "text/json",
            "text/plain",
            "text/csv",
            "application/problem+json"
        };
        var localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
        if (localVarHttpHeaderAccept != null)
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

        if (date != null)
            localVarQueryParams.AddRange(
                Configuration.ApiClient.ParameterToKeyValuePairs("", "date", date)); // query parameter
        if (languageIsoCode != null)
            localVarQueryParams.AddRange(
                Configuration.ApiClient.ParameterToKeyValuePairs("", "languageIsoCode",
                    languageIsoCode)); // query parameter

        // make the HTTP request
        var localVarResponse = (RestResponse)Configuration.ApiClient.CallApi(localVarPath,
            Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams,
            localVarFileParams,
            localVarPathParams, localVarHttpContentType);

        var localVarStatusCode = (int)localVarResponse.StatusCode;

        if (ExceptionFactory != null)
        {
            var exception = ExceptionFactory("PublicHolidaysByDateGet", localVarResponse);
            if (exception != null) throw exception;
        }

        return new ApiResponse<List<HolidayByDateResponse>>(localVarStatusCode,
            localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
            (List<HolidayByDateResponse>)Configuration.ApiClient.Deserialize(localVarResponse,
                typeof(List<HolidayByDateResponse>)));
    }

    /// <summary>
    ///     Returns a list of public holidays from all countries for a given date.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="date">Date of interest</param>
    /// <param name="languageIsoCode">ISO-639-1 code of a language or empty (optional)</param>
    /// <returns>Task of List&lt;HolidayByDateResponse&gt;</returns>
    public async Task<List<HolidayByDateResponse>> PublicHolidaysByDateGetAsync(DateTime? date,
        string languageIsoCode = null)
    {
        ApiResponse<List<HolidayByDateResponse>> localVarResponse =
            await PublicHolidaysByDateGetAsyncWithHttpInfo(date, languageIsoCode);
        return localVarResponse.Data;
    }

    /// <summary>
    ///     Returns a list of public holidays from all countries for a given date.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="date">Date of interest</param>
    /// <param name="languageIsoCode">ISO-639-1 code of a language or empty (optional)</param>
    /// <returns>Task of ApiResponse (List&lt;HolidayByDateResponse&gt;)</returns>
    public async Task<ApiResponse<List<HolidayByDateResponse>>> PublicHolidaysByDateGetAsyncWithHttpInfo(DateTime? date,
        string languageIsoCode = null)
    {
        // verify the required parameter 'date' is set
        if (date == null)
            throw new ApiException(400,
                "Missing required parameter 'date' when calling HolidaysApi->PublicHolidaysByDateGet");

        var localVarPath = "/PublicHolidaysByDate";
        var localVarPathParams = new Dictionary<string, string>();
        var localVarQueryParams = new List<KeyValuePair<string, string>>();
        var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
        var localVarFormParams = new Dictionary<string, string>();
        var localVarFileParams = new Dictionary<string, FileParameter>();
        object localVarPostBody = null;

        // to determine the Content-Type header
        string[] localVarHttpContentTypes = new string[]
        {
        };
        var localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

        // to determine the Accept header
        string[] localVarHttpHeaderAccepts = new[]
        {
            "application/json",
            "text/json",
            "text/plain",
            "text/csv",
            "application/problem+json"
        };
        var localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
        if (localVarHttpHeaderAccept != null)
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

        if (date != null)
            localVarQueryParams.AddRange(
                Configuration.ApiClient.ParameterToKeyValuePairs("", "date", date)); // query parameter
        if (languageIsoCode != null)
            localVarQueryParams.AddRange(
                Configuration.ApiClient.ParameterToKeyValuePairs("", "languageIsoCode",
                    languageIsoCode)); // query parameter

        // make the HTTP request
        var localVarResponse = (RestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
            Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams,
            localVarFileParams,
            localVarPathParams, localVarHttpContentType);

        var localVarStatusCode = (int)localVarResponse.StatusCode;

        if (ExceptionFactory != null)
        {
            var exception = ExceptionFactory("PublicHolidaysByDateGet", localVarResponse);
            if (exception != null) throw exception;
        }

        return new ApiResponse<List<HolidayByDateResponse>>(localVarStatusCode,
            localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
            (List<HolidayByDateResponse>)Configuration.ApiClient.Deserialize(localVarResponse,
                typeof(List<HolidayByDateResponse>)));
    }

    /// <summary>
    ///     Returns list of public holidays for a given country
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="countryIsoCode">ISO 3166-1 code of the country</param>
    /// <param name="validFrom">Start of the date range</param>
    /// <param name="validTo">End of the date range</param>
    /// <param name="languageIsoCode">ISO-639-1 code of a language or empty (optional)</param>
    /// <param name="subdivisionCode">Code of the subdivision or empty (optional)</param>
    /// <returns>List&lt;HolidayResponse&gt;</returns>
    public List<HolidayResponse> PublicHolidaysGet(string countryIsoCode, DateTime? validFrom, DateTime? validTo,
        string languageIsoCode = null, string subdivisionCode = null)
    {
        ApiResponse<List<HolidayResponse>> localVarResponse =
            PublicHolidaysGetWithHttpInfo(countryIsoCode, validFrom, validTo, languageIsoCode, subdivisionCode);
        return localVarResponse.Data;
    }

    /// <summary>
    ///     Returns list of public holidays for a given country
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="countryIsoCode">ISO 3166-1 code of the country</param>
    /// <param name="validFrom">Start of the date range</param>
    /// <param name="validTo">End of the date range</param>
    /// <param name="languageIsoCode">ISO-639-1 code of a language or empty (optional)</param>
    /// <param name="subdivisionCode">Code of the subdivision or empty (optional)</param>
    /// <returns>ApiResponse of List&lt;HolidayResponse&gt;</returns>
    public ApiResponse<List<HolidayResponse>> PublicHolidaysGetWithHttpInfo(string countryIsoCode, DateTime? validFrom,
        DateTime? validTo, string languageIsoCode = null, string subdivisionCode = null)
    {
        // verify the required parameter 'countryIsoCode' is set
        if (countryIsoCode == null)
            throw new ApiException(400,
                "Missing required parameter 'countryIsoCode' when calling HolidaysApi->PublicHolidaysGet");
        // verify the required parameter 'validFrom' is set
        if (validFrom == null)
            throw new ApiException(400,
                "Missing required parameter 'validFrom' when calling HolidaysApi->PublicHolidaysGet");
        // verify the required parameter 'validTo' is set
        if (validTo == null)
            throw new ApiException(400,
                "Missing required parameter 'validTo' when calling HolidaysApi->PublicHolidaysGet");

        var localVarPath = "/PublicHolidays";
        var localVarPathParams = new Dictionary<string, string>();
        var localVarQueryParams = new List<KeyValuePair<string, string>>();
        var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
        var localVarFormParams = new Dictionary<string, string>();
        var localVarFileParams = new Dictionary<string, FileParameter>();
        object localVarPostBody = null;

        // to determine the Content-Type header
        string[] localVarHttpContentTypes = new string[]
        {
        };
        var localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

        // to determine the Accept header
        string[] localVarHttpHeaderAccepts = new[]
        {
            "application/json",
            "text/json",
            "text/plain",
            "text/calendar",
            "text/csv",
            "application/problem+json"
        };
        var localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
        if (localVarHttpHeaderAccept != null)
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

        if (countryIsoCode != null)
            localVarQueryParams.AddRange(
                Configuration.ApiClient.ParameterToKeyValuePairs("", "countryIsoCode",
                    countryIsoCode)); // query parameter
        if (validFrom != null)
            localVarQueryParams.AddRange(
                Configuration.ApiClient.ParameterToKeyValuePairs("", "validFrom", validFrom)); // query parameter
        if (validTo != null)
            localVarQueryParams.AddRange(
                Configuration.ApiClient.ParameterToKeyValuePairs("", "validTo", validTo)); // query parameter
        if (languageIsoCode != null)
            localVarQueryParams.AddRange(
                Configuration.ApiClient.ParameterToKeyValuePairs("", "languageIsoCode",
                    languageIsoCode)); // query parameter
        if (subdivisionCode != null)
            localVarQueryParams.AddRange(
                Configuration.ApiClient.ParameterToKeyValuePairs("", "subdivisionCode",
                    subdivisionCode)); // query parameter

        // make the HTTP request
        var localVarResponse = (RestResponse)Configuration.ApiClient.CallApi(localVarPath,
            Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams,
            localVarFileParams,
            localVarPathParams, localVarHttpContentType);

        var localVarStatusCode = (int)localVarResponse.StatusCode;

        if (ExceptionFactory != null)
        {
            var exception = ExceptionFactory("PublicHolidaysGet", localVarResponse);
            if (exception != null) throw exception;
        }

        return new ApiResponse<List<HolidayResponse>>(localVarStatusCode,
            localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
            (List<HolidayResponse>)Configuration.ApiClient.Deserialize(localVarResponse,
                typeof(List<HolidayResponse>)));
    }

    /// <summary>
    ///     Returns list of public holidays for a given country
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="countryIsoCode">ISO 3166-1 code of the country</param>
    /// <param name="validFrom">Start of the date range</param>
    /// <param name="validTo">End of the date range</param>
    /// <param name="languageIsoCode">ISO-639-1 code of a language or empty (optional)</param>
    /// <param name="subdivisionCode">Code of the subdivision or empty (optional)</param>
    /// <returns>Task of List&lt;HolidayResponse&gt;</returns>
    public async Task<List<HolidayResponse>> PublicHolidaysGetAsync(string countryIsoCode, DateTime? validFrom,
        DateTime? validTo, string languageIsoCode = null, string subdivisionCode = null)
    {
        ApiResponse<List<HolidayResponse>> localVarResponse =
            await PublicHolidaysGetAsyncWithHttpInfo(countryIsoCode, validFrom, validTo, languageIsoCode,
                subdivisionCode);
        return localVarResponse.Data;
    }

    /// <summary>
    ///     Returns list of public holidays for a given country
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="countryIsoCode">ISO 3166-1 code of the country</param>
    /// <param name="validFrom">Start of the date range</param>
    /// <param name="validTo">End of the date range</param>
    /// <param name="languageIsoCode">ISO-639-1 code of a language or empty (optional)</param>
    /// <param name="subdivisionCode">Code of the subdivision or empty (optional)</param>
    /// <returns>Task of ApiResponse (List&lt;HolidayResponse&gt;)</returns>
    public async Task<ApiResponse<List<HolidayResponse>>> PublicHolidaysGetAsyncWithHttpInfo(string countryIsoCode,
        DateTime? validFrom, DateTime? validTo, string languageIsoCode = null, string subdivisionCode = null)
    {
        // verify the required parameter 'countryIsoCode' is set
        if (countryIsoCode == null)
            throw new ApiException(400,
                "Missing required parameter 'countryIsoCode' when calling HolidaysApi->PublicHolidaysGet");
        // verify the required parameter 'validFrom' is set
        if (validFrom == null)
            throw new ApiException(400,
                "Missing required parameter 'validFrom' when calling HolidaysApi->PublicHolidaysGet");
        // verify the required parameter 'validTo' is set
        if (validTo == null)
            throw new ApiException(400,
                "Missing required parameter 'validTo' when calling HolidaysApi->PublicHolidaysGet");

        var localVarPath = "/PublicHolidays";
        var localVarPathParams = new Dictionary<string, string>();
        var localVarQueryParams = new List<KeyValuePair<string, string>>();
        var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
        var localVarFormParams = new Dictionary<string, string>();
        var localVarFileParams = new Dictionary<string, FileParameter>();
        object localVarPostBody = null;

        // to determine the Content-Type header
        string[] localVarHttpContentTypes = new string[]
        {
        };
        var localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

        // to determine the Accept header
        string[] localVarHttpHeaderAccepts = new[]
        {
            "application/json",
            "text/json",
            "text/plain",
            "text/calendar",
            "text/csv",
            "application/problem+json"
        };
        var localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
        if (localVarHttpHeaderAccept != null)
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

        if (countryIsoCode != null)
            localVarQueryParams.AddRange(
                Configuration.ApiClient.ParameterToKeyValuePairs("", "countryIsoCode",
                    countryIsoCode)); // query parameter
        if (validFrom != null)
            localVarQueryParams.AddRange(
                Configuration.ApiClient.ParameterToKeyValuePairs("", "validFrom", validFrom)); // query parameter
        if (validTo != null)
            localVarQueryParams.AddRange(
                Configuration.ApiClient.ParameterToKeyValuePairs("", "validTo", validTo)); // query parameter
        if (languageIsoCode != null)
            localVarQueryParams.AddRange(
                Configuration.ApiClient.ParameterToKeyValuePairs("", "languageIsoCode",
                    languageIsoCode)); // query parameter
        if (subdivisionCode != null)
            localVarQueryParams.AddRange(
                Configuration.ApiClient.ParameterToKeyValuePairs("", "subdivisionCode",
                    subdivisionCode)); // query parameter

        // make the HTTP request
        var localVarResponse = (RestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
            Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams,
            localVarFileParams,
            localVarPathParams, localVarHttpContentType);

        var localVarStatusCode = (int)localVarResponse.StatusCode;

        if (ExceptionFactory != null)
        {
            var exception = ExceptionFactory("PublicHolidaysGet", localVarResponse);
            if (exception != null) throw exception;
        }

        return new ApiResponse<List<HolidayResponse>>(localVarStatusCode,
            localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
            (List<HolidayResponse>)Configuration.ApiClient.Deserialize(localVarResponse,
                typeof(List<HolidayResponse>)));
    }

    /// <summary>
    ///     Returns a list of school holidays from all countries for a given date.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="date">Date of interest</param>
    /// <param name="languageIsoCode">ISO-639-1 code of a language or empty (optional)</param>
    /// <returns>List&lt;HolidayByDateResponse&gt;</returns>
    public List<HolidayByDateResponse> SchoolHolidaysByDateGet(DateTime? date, string languageIsoCode = null)
    {
        ApiResponse<List<HolidayByDateResponse>> localVarResponse =
            SchoolHolidaysByDateGetWithHttpInfo(date, languageIsoCode);
        return localVarResponse.Data;
    }

    /// <summary>
    ///     Returns a list of school holidays from all countries for a given date.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="date">Date of interest</param>
    /// <param name="languageIsoCode">ISO-639-1 code of a language or empty (optional)</param>
    /// <returns>ApiResponse of List&lt;HolidayByDateResponse&gt;</returns>
    public ApiResponse<List<HolidayByDateResponse>> SchoolHolidaysByDateGetWithHttpInfo(DateTime? date,
        string languageIsoCode = null)
    {
        // verify the required parameter 'date' is set
        if (date == null)
            throw new ApiException(400,
                "Missing required parameter 'date' when calling HolidaysApi->SchoolHolidaysByDateGet");

        var localVarPath = "/SchoolHolidaysByDate";
        var localVarPathParams = new Dictionary<string, string>();
        var localVarQueryParams = new List<KeyValuePair<string, string>>();
        var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
        var localVarFormParams = new Dictionary<string, string>();
        var localVarFileParams = new Dictionary<string, FileParameter>();
        object localVarPostBody = null;

        // to determine the Content-Type header
        string[] localVarHttpContentTypes = new string[]
        {
        };
        var localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

        // to determine the Accept header
        string[] localVarHttpHeaderAccepts = new[]
        {
            "application/json",
            "text/json",
            "text/plain",
            "text/csv",
            "application/problem+json"
        };
        var localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
        if (localVarHttpHeaderAccept != null)
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

        if (date != null)
            localVarQueryParams.AddRange(
                Configuration.ApiClient.ParameterToKeyValuePairs("", "date", date)); // query parameter
        if (languageIsoCode != null)
            localVarQueryParams.AddRange(
                Configuration.ApiClient.ParameterToKeyValuePairs("", "languageIsoCode",
                    languageIsoCode)); // query parameter

        // make the HTTP request
        var localVarResponse = (RestResponse)Configuration.ApiClient.CallApi(localVarPath,
            Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams,
            localVarFileParams,
            localVarPathParams, localVarHttpContentType);

        var localVarStatusCode = (int)localVarResponse.StatusCode;

        if (ExceptionFactory != null)
        {
            var exception = ExceptionFactory("SchoolHolidaysByDateGet", localVarResponse);
            if (exception != null) throw exception;
        }

        return new ApiResponse<List<HolidayByDateResponse>>(localVarStatusCode,
            localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
            (List<HolidayByDateResponse>)Configuration.ApiClient.Deserialize(localVarResponse,
                typeof(List<HolidayByDateResponse>)));
    }

    /// <summary>
    ///     Returns a list of school holidays from all countries for a given date.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="date">Date of interest</param>
    /// <param name="languageIsoCode">ISO-639-1 code of a language or empty (optional)</param>
    /// <returns>Task of List&lt;HolidayByDateResponse&gt;</returns>
    public async Task<List<HolidayByDateResponse>> SchoolHolidaysByDateGetAsync(DateTime? date,
        string languageIsoCode = null)
    {
        ApiResponse<List<HolidayByDateResponse>> localVarResponse =
            await SchoolHolidaysByDateGetAsyncWithHttpInfo(date, languageIsoCode);
        return localVarResponse.Data;
    }

    /// <summary>
    ///     Returns a list of school holidays from all countries for a given date.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="date">Date of interest</param>
    /// <param name="languageIsoCode">ISO-639-1 code of a language or empty (optional)</param>
    /// <returns>Task of ApiResponse (List&lt;HolidayByDateResponse&gt;)</returns>
    public async Task<ApiResponse<List<HolidayByDateResponse>>> SchoolHolidaysByDateGetAsyncWithHttpInfo(DateTime? date,
        string languageIsoCode = null)
    {
        // verify the required parameter 'date' is set
        if (date == null)
            throw new ApiException(400,
                "Missing required parameter 'date' when calling HolidaysApi->SchoolHolidaysByDateGet");

        var localVarPath = "/SchoolHolidaysByDate";
        var localVarPathParams = new Dictionary<string, string>();
        var localVarQueryParams = new List<KeyValuePair<string, string>>();
        var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
        var localVarFormParams = new Dictionary<string, string>();
        var localVarFileParams = new Dictionary<string, FileParameter>();
        object localVarPostBody = null;

        // to determine the Content-Type header
        string[] localVarHttpContentTypes = new string[]
        {
        };
        var localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

        // to determine the Accept header
        string[] localVarHttpHeaderAccepts = new[]
        {
            "application/json",
            "text/json",
            "text/plain",
            "text/csv",
            "application/problem+json"
        };
        var localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
        if (localVarHttpHeaderAccept != null)
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

        if (date != null)
            localVarQueryParams.AddRange(
                Configuration.ApiClient.ParameterToKeyValuePairs("", "date", date)); // query parameter
        if (languageIsoCode != null)
            localVarQueryParams.AddRange(
                Configuration.ApiClient.ParameterToKeyValuePairs("", "languageIsoCode",
                    languageIsoCode)); // query parameter

        // make the HTTP request
        var localVarResponse = (RestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
            Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams,
            localVarFileParams,
            localVarPathParams, localVarHttpContentType);

        var localVarStatusCode = (int)localVarResponse.StatusCode;

        if (ExceptionFactory != null)
        {
            var exception = ExceptionFactory("SchoolHolidaysByDateGet", localVarResponse);
            if (exception != null) throw exception;
        }

        return new ApiResponse<List<HolidayByDateResponse>>(localVarStatusCode,
            localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
            (List<HolidayByDateResponse>)Configuration.ApiClient.Deserialize(localVarResponse,
                typeof(List<HolidayByDateResponse>)));
    }

    /// <summary>
    ///     Returns list of official school holidays for a given country
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="countryIsoCode">ISO 3166-1 code of the country</param>
    /// <param name="validFrom">Start of the date range</param>
    /// <param name="validTo">End of the date range</param>
    /// <param name="languageIsoCode">ISO-639-1 code of a language or empty (optional)</param>
    /// <param name="subdivisionCode">Code of the subdivision or empty (optional)</param>
    /// <returns>List&lt;HolidayResponse&gt;</returns>
    public List<HolidayResponse> SchoolHolidaysGet(string countryIsoCode, DateTime? validFrom, DateTime? validTo,
        string languageIsoCode = null, string subdivisionCode = null)
    {
        ApiResponse<List<HolidayResponse>> localVarResponse =
            SchoolHolidaysGetWithHttpInfo(countryIsoCode, validFrom, validTo, languageIsoCode, subdivisionCode);
        return localVarResponse.Data;
    }

    /// <summary>
    ///     Returns list of official school holidays for a given country
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="countryIsoCode">ISO 3166-1 code of the country</param>
    /// <param name="validFrom">Start of the date range</param>
    /// <param name="validTo">End of the date range</param>
    /// <param name="languageIsoCode">ISO-639-1 code of a language or empty (optional)</param>
    /// <param name="subdivisionCode">Code of the subdivision or empty (optional)</param>
    /// <returns>ApiResponse of List&lt;HolidayResponse&gt;</returns>
    public ApiResponse<List<HolidayResponse>> SchoolHolidaysGetWithHttpInfo(string countryIsoCode, DateTime? validFrom,
        DateTime? validTo, string languageIsoCode = null, string subdivisionCode = null)
    {
        // verify the required parameter 'countryIsoCode' is set
        if (countryIsoCode == null)
            throw new ApiException(400,
                "Missing required parameter 'countryIsoCode' when calling HolidaysApi->SchoolHolidaysGet");
        // verify the required parameter 'validFrom' is set
        if (validFrom == null)
            throw new ApiException(400,
                "Missing required parameter 'validFrom' when calling HolidaysApi->SchoolHolidaysGet");
        // verify the required parameter 'validTo' is set
        if (validTo == null)
            throw new ApiException(400,
                "Missing required parameter 'validTo' when calling HolidaysApi->SchoolHolidaysGet");

        var localVarPath = "/SchoolHolidays";
        var localVarPathParams = new Dictionary<string, string>();
        var localVarQueryParams = new List<KeyValuePair<string, string>>();
        var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
        var localVarFormParams = new Dictionary<string, string>();
        var localVarFileParams = new Dictionary<string, FileParameter>();
        object localVarPostBody = null;

        // to determine the Content-Type header
        string[] localVarHttpContentTypes = new string[]
        {
        };
        var localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

        // to determine the Accept header
        string[] localVarHttpHeaderAccepts = new[]
        {
            "application/json",
            "text/json",
            "text/plain",
            "text/calendar",
            "text/csv",
            "application/problem+json"
        };
        var localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
        if (localVarHttpHeaderAccept != null)
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

        if (countryIsoCode != null)
            localVarQueryParams.AddRange(
                Configuration.ApiClient.ParameterToKeyValuePairs("", "countryIsoCode",
                    countryIsoCode)); // query parameter
        if (validFrom != null)
            localVarQueryParams.AddRange(
                Configuration.ApiClient.ParameterToKeyValuePairs("", "validFrom", validFrom)); // query parameter
        if (validTo != null)
            localVarQueryParams.AddRange(
                Configuration.ApiClient.ParameterToKeyValuePairs("", "validTo", validTo)); // query parameter
        if (languageIsoCode != null)
            localVarQueryParams.AddRange(
                Configuration.ApiClient.ParameterToKeyValuePairs("", "languageIsoCode",
                    languageIsoCode)); // query parameter
        if (subdivisionCode != null)
            localVarQueryParams.AddRange(
                Configuration.ApiClient.ParameterToKeyValuePairs("", "subdivisionCode",
                    subdivisionCode)); // query parameter

        // make the HTTP request
        var localVarResponse = (RestResponse)Configuration.ApiClient.CallApi(localVarPath,
            Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams,
            localVarFileParams,
            localVarPathParams, localVarHttpContentType);

        var localVarStatusCode = (int)localVarResponse.StatusCode;

        if (ExceptionFactory != null)
        {
            var exception = ExceptionFactory("SchoolHolidaysGet", localVarResponse);
            if (exception != null) throw exception;
        }

        return new ApiResponse<List<HolidayResponse>>(localVarStatusCode,
            localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
            (List<HolidayResponse>)Configuration.ApiClient.Deserialize(localVarResponse,
                typeof(List<HolidayResponse>)));
    }

    /// <summary>
    ///     Returns list of official school holidays for a given country
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="countryIsoCode">ISO 3166-1 code of the country</param>
    /// <param name="validFrom">Start of the date range</param>
    /// <param name="validTo">End of the date range</param>
    /// <param name="languageIsoCode">ISO-639-1 code of a language or empty (optional)</param>
    /// <param name="subdivisionCode">Code of the subdivision or empty (optional)</param>
    /// <returns>Task of List&lt;HolidayResponse&gt;</returns>
    public async Task<List<HolidayResponse>> SchoolHolidaysGetAsync(string countryIsoCode, DateTime? validFrom,
        DateTime? validTo, string languageIsoCode = null, string subdivisionCode = null)
    {
        ApiResponse<List<HolidayResponse>> localVarResponse =
            await SchoolHolidaysGetAsyncWithHttpInfo(countryIsoCode, validFrom, validTo, languageIsoCode,
                subdivisionCode);
        return localVarResponse.Data;
    }

    /// <summary>
    ///     Returns list of official school holidays for a given country
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="countryIsoCode">ISO 3166-1 code of the country</param>
    /// <param name="validFrom">Start of the date range</param>
    /// <param name="validTo">End of the date range</param>
    /// <param name="languageIsoCode">ISO-639-1 code of a language or empty (optional)</param>
    /// <param name="subdivisionCode">Code of the subdivision or empty (optional)</param>
    /// <returns>Task of ApiResponse (List&lt;HolidayResponse&gt;)</returns>
    public async Task<ApiResponse<List<HolidayResponse>>> SchoolHolidaysGetAsyncWithHttpInfo(string countryIsoCode,
        DateTime? validFrom, DateTime? validTo, string languageIsoCode = null, string subdivisionCode = null)
    {
        // verify the required parameter 'countryIsoCode' is set
        if (countryIsoCode == null)
            throw new ApiException(400,
                "Missing required parameter 'countryIsoCode' when calling HolidaysApi->SchoolHolidaysGet");
        // verify the required parameter 'validFrom' is set
        if (validFrom == null)
            throw new ApiException(400,
                "Missing required parameter 'validFrom' when calling HolidaysApi->SchoolHolidaysGet");
        // verify the required parameter 'validTo' is set
        if (validTo == null)
            throw new ApiException(400,
                "Missing required parameter 'validTo' when calling HolidaysApi->SchoolHolidaysGet");

        var localVarPath = "/SchoolHolidays";
        var localVarPathParams = new Dictionary<string, string>();
        var localVarQueryParams = new List<KeyValuePair<string, string>>();
        var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
        var localVarFormParams = new Dictionary<string, string>();
        var localVarFileParams = new Dictionary<string, FileParameter>();
        object localVarPostBody = null;

        // to determine the Content-Type header
        string[] localVarHttpContentTypes = new string[]
        {
        };
        var localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

        // to determine the Accept header
        string[] localVarHttpHeaderAccepts = new[]
        {
            "application/json",
            "text/json",
            "text/plain",
            "text/calendar",
            "text/csv",
            "application/problem+json"
        };
        var localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
        if (localVarHttpHeaderAccept != null)
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

        if (countryIsoCode != null)
            localVarQueryParams.AddRange(
                Configuration.ApiClient.ParameterToKeyValuePairs("", "countryIsoCode",
                    countryIsoCode)); // query parameter
        if (validFrom != null)
            localVarQueryParams.AddRange(
                Configuration.ApiClient.ParameterToKeyValuePairs("", "validFrom", validFrom)); // query parameter
        if (validTo != null)
            localVarQueryParams.AddRange(
                Configuration.ApiClient.ParameterToKeyValuePairs("", "validTo", validTo)); // query parameter
        if (languageIsoCode != null)
            localVarQueryParams.AddRange(
                Configuration.ApiClient.ParameterToKeyValuePairs("", "languageIsoCode",
                    languageIsoCode)); // query parameter
        if (subdivisionCode != null)
            localVarQueryParams.AddRange(
                Configuration.ApiClient.ParameterToKeyValuePairs("", "subdivisionCode",
                    subdivisionCode)); // query parameter

        // make the HTTP request
        var localVarResponse = (RestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
            Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams,
            localVarFileParams,
            localVarPathParams, localVarHttpContentType);

        var localVarStatusCode = (int)localVarResponse.StatusCode;

        if (ExceptionFactory != null)
        {
            var exception = ExceptionFactory("SchoolHolidaysGet", localVarResponse);
            if (exception != null) throw exception;
        }

        return new ApiResponse<List<HolidayResponse>>(localVarStatusCode,
            localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
            (List<HolidayResponse>)Configuration.ApiClient.Deserialize(localVarResponse,
                typeof(List<HolidayResponse>)));
    }

    /// <summary>
    ///     Sets the base path of the API client.
    /// </summary>
    /// <value>The base path</value>
    [Obsolete(
        "SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
    public void SetBasePath(string basePath)
    {
        // do nothing
    }

    /// <summary>
    ///     Gets the default header.
    /// </summary>
    /// <returns>Dictionary of HTTP header</returns>
    [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
    public IDictionary<string, string> DefaultHeader()
    {
        return new ReadOnlyDictionary<string, string>(Configuration.DefaultHeader);
    }

    /// <summary>
    ///     Add default header.
    /// </summary>
    /// <param name="key">Header field name.</param>
    /// <param name="value">Header field value.</param>
    /// <returns></returns>
    [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
    public void AddDefaultHeader(string key, string value)
    {
        Configuration.AddDefaultHeader(key, value);
    }
}