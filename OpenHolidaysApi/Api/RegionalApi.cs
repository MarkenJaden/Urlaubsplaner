/*
 * OpenHolidays API v1
 *
 * Open Data API for public and school holidays
 *
 * OpenAPI spec version: v1
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System.Collections.ObjectModel;
using OpenHolidaysApi.Client;
using OpenHolidaysApi.Model;
using RestSharp;

namespace OpenHolidaysApi.Api;

/// <summary>
///     Represents a collection of functions to interact with the API endpoints
/// </summary>
public interface IRegionalApi : IApiAccessor
{
    #region Synchronous Operations

    /// <summary>
    ///     Returns a list of all supported countries
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="languageIsoCode">ISO-639-1 code of a language or empty (optional)</param>
    /// <returns>List&lt;CountryResponse&gt;</returns>
    List<CountryResponse> CountriesGet(string languageIsoCode = null);

    /// <summary>
    ///     Returns a list of all supported countries
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="languageIsoCode">ISO-639-1 code of a language or empty (optional)</param>
    /// <returns>ApiResponse of List&lt;CountryResponse&gt;</returns>
    ApiResponse<List<CountryResponse>> CountriesGetWithHttpInfo(string languageIsoCode = null);

    /// <summary>
    ///     Returns a list of all used languages
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="languageIsoCode">ISO-639-1 code of a language or empty (optional)</param>
    /// <returns>List&lt;LanguageResponse&gt;</returns>
    List<LanguageResponse> LanguagesGet(string languageIsoCode = null);

    /// <summary>
    ///     Returns a list of all used languages
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="languageIsoCode">ISO-639-1 code of a language or empty (optional)</param>
    /// <returns>ApiResponse of List&lt;LanguageResponse&gt;</returns>
    ApiResponse<List<LanguageResponse>> LanguagesGetWithHttpInfo(string languageIsoCode = null);

    /// <summary>
    ///     Returns a list of relevant subdivisions for a supported country (if any)
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="countryIsoCode">ISO 3166-1 code of the country</param>
    /// <param name="languageIsoCode">ISO-639-1 code of a language or empty (optional)</param>
    /// <returns>List&lt;SubdivisionResponse&gt;</returns>
    List<SubdivisionResponse> SubdivisionsGet(string countryIsoCode, string languageIsoCode = null);

    /// <summary>
    ///     Returns a list of relevant subdivisions for a supported country (if any)
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="countryIsoCode">ISO 3166-1 code of the country</param>
    /// <param name="languageIsoCode">ISO-639-1 code of a language or empty (optional)</param>
    /// <returns>ApiResponse of List&lt;SubdivisionResponse&gt;</returns>
    ApiResponse<List<SubdivisionResponse>> SubdivisionsGetWithHttpInfo(string countryIsoCode,
        string languageIsoCode = null);

    #endregion Synchronous Operations

    #region Asynchronous Operations

    /// <summary>
    ///     Returns a list of all supported countries
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="languageIsoCode">ISO-639-1 code of a language or empty (optional)</param>
    /// <returns>Task of List&lt;CountryResponse&gt;</returns>
    Task<List<CountryResponse>> CountriesGetAsync(string languageIsoCode = null);

    /// <summary>
    ///     Returns a list of all supported countries
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="languageIsoCode">ISO-639-1 code of a language or empty (optional)</param>
    /// <returns>Task of ApiResponse (List&lt;CountryResponse&gt;)</returns>
    Task<ApiResponse<List<CountryResponse>>> CountriesGetAsyncWithHttpInfo(string languageIsoCode = null);

    /// <summary>
    ///     Returns a list of all used languages
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="languageIsoCode">ISO-639-1 code of a language or empty (optional)</param>
    /// <returns>Task of List&lt;LanguageResponse&gt;</returns>
    Task<List<LanguageResponse>> LanguagesGetAsync(string languageIsoCode = null);

    /// <summary>
    ///     Returns a list of all used languages
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="languageIsoCode">ISO-639-1 code of a language or empty (optional)</param>
    /// <returns>Task of ApiResponse (List&lt;LanguageResponse&gt;)</returns>
    Task<ApiResponse<List<LanguageResponse>>> LanguagesGetAsyncWithHttpInfo(string languageIsoCode = null);

    /// <summary>
    ///     Returns a list of relevant subdivisions for a supported country (if any)
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="countryIsoCode">ISO 3166-1 code of the country</param>
    /// <param name="languageIsoCode">ISO-639-1 code of a language or empty (optional)</param>
    /// <returns>Task of List&lt;SubdivisionResponse&gt;</returns>
    Task<List<SubdivisionResponse>> SubdivisionsGetAsync(string countryIsoCode, string languageIsoCode = null);

    /// <summary>
    ///     Returns a list of relevant subdivisions for a supported country (if any)
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="countryIsoCode">ISO 3166-1 code of the country</param>
    /// <param name="languageIsoCode">ISO-639-1 code of a language or empty (optional)</param>
    /// <returns>Task of ApiResponse (List&lt;SubdivisionResponse&gt;)</returns>
    Task<ApiResponse<List<SubdivisionResponse>>> SubdivisionsGetAsyncWithHttpInfo(string countryIsoCode,
        string languageIsoCode = null);

    #endregion Asynchronous Operations
}

/// <summary>
///     Represents a collection of functions to interact with the API endpoints
/// </summary>
public class RegionalApi : IRegionalApi
{
    private ExceptionFactory _exceptionFactory = (name, response) => null;

    /// <summary>
    ///     Initializes a new instance of the <see cref="RegionalApi" /> class.
    /// </summary>
    /// <returns></returns>
    public RegionalApi(string basePath)
    {
        Configuration = new Configuration { BasePath = basePath };

        ExceptionFactory = Configuration.DefaultExceptionFactory;
    }

    /// <summary>
    ///     Initializes a new instance of the <see cref="RegionalApi" /> class
    /// </summary>
    /// <returns></returns>
    public RegionalApi()
    {
        Configuration = Configuration.Default;

        ExceptionFactory = Configuration.DefaultExceptionFactory;
    }

    /// <summary>
    ///     Initializes a new instance of the <see cref="RegionalApi" /> class
    ///     using Configuration object
    /// </summary>
    /// <param name="configuration">An instance of Configuration</param>
    /// <returns></returns>
    public RegionalApi(Configuration configuration = null)
    {
        if (configuration == null) // use the default one in Configuration
            Configuration = Configuration.Default;
        else
            Configuration = configuration;

        ExceptionFactory = Configuration.DefaultExceptionFactory;
    }

    /// <summary>
    ///     Gets the base path of the API client.
    /// </summary>
    /// <value>The base path</value>
    public string GetBasePath()
    {
        return Configuration.ApiClient.RestClient.Options.BaseUrl.ToString();
    }

    /// <summary>
    ///     Gets or sets the configuration object
    /// </summary>
    /// <value>An instance of the Configuration</value>
    public Configuration Configuration { get; set; }

    /// <summary>
    ///     Provides a factory method hook for the creation of exceptions.
    /// </summary>
    public ExceptionFactory ExceptionFactory
    {
        get
        {
            if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
            return _exceptionFactory;
        }
        set => _exceptionFactory = value;
    }

    /// <summary>
    ///     Returns a list of all supported countries
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="languageIsoCode">ISO-639-1 code of a language or empty (optional)</param>
    /// <returns>List&lt;CountryResponse&gt;</returns>
    public List<CountryResponse> CountriesGet(string languageIsoCode = null)
    {
        ApiResponse<List<CountryResponse>> localVarResponse = CountriesGetWithHttpInfo(languageIsoCode);
        return localVarResponse.Data;
    }

    /// <summary>
    ///     Returns a list of all supported countries
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="languageIsoCode">ISO-639-1 code of a language or empty (optional)</param>
    /// <returns>ApiResponse of List&lt;CountryResponse&gt;</returns>
    public ApiResponse<List<CountryResponse>> CountriesGetWithHttpInfo(string languageIsoCode = null)
    {
        var localVarPath = "/Countries";
        var localVarPathParams = new Dictionary<string, string>();
        var localVarQueryParams = new List<KeyValuePair<string, string>>();
        var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
        var localVarFormParams = new Dictionary<string, string>();
        var localVarFileParams = new Dictionary<string, FileParameter>();
        object localVarPostBody = null;

        // to determine the Content-Type header
        string[] localVarHttpContentTypes = new string[]
        {
        };
        var localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

        // to determine the Accept header
        string[] localVarHttpHeaderAccepts = new[]
        {
            "application/json",
            "text/json",
            "text/plain",
            "text/csv",
            "application/problem+json"
        };
        var localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
        if (localVarHttpHeaderAccept != null)
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

        if (languageIsoCode != null)
            localVarQueryParams.AddRange(
                Configuration.ApiClient.ParameterToKeyValuePairs("", "languageIsoCode",
                    languageIsoCode)); // query parameter

        // make the HTTP request
        var localVarResponse = (RestResponse)Configuration.ApiClient.CallApi(localVarPath,
            Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams,
            localVarFileParams,
            localVarPathParams, localVarHttpContentType);

        var localVarStatusCode = (int)localVarResponse.StatusCode;

        if (ExceptionFactory != null)
        {
            var exception = ExceptionFactory("CountriesGet", localVarResponse);
            if (exception != null) throw exception;
        }

        return new ApiResponse<List<CountryResponse>>(localVarStatusCode,
            localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
            (List<CountryResponse>)Configuration.ApiClient.Deserialize(localVarResponse,
                typeof(List<CountryResponse>)));
    }

    /// <summary>
    ///     Returns a list of all supported countries
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="languageIsoCode">ISO-639-1 code of a language or empty (optional)</param>
    /// <returns>Task of List&lt;CountryResponse&gt;</returns>
    public async Task<List<CountryResponse>> CountriesGetAsync(string languageIsoCode = null)
    {
        ApiResponse<List<CountryResponse>> localVarResponse = await CountriesGetAsyncWithHttpInfo(languageIsoCode);
        return localVarResponse.Data;
    }

    /// <summary>
    ///     Returns a list of all supported countries
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="languageIsoCode">ISO-639-1 code of a language or empty (optional)</param>
    /// <returns>Task of ApiResponse (List&lt;CountryResponse&gt;)</returns>
    public async Task<ApiResponse<List<CountryResponse>>> CountriesGetAsyncWithHttpInfo(string languageIsoCode = null)
    {
        var localVarPath = "/Countries";
        var localVarPathParams = new Dictionary<string, string>();
        var localVarQueryParams = new List<KeyValuePair<string, string>>();
        var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
        var localVarFormParams = new Dictionary<string, string>();
        var localVarFileParams = new Dictionary<string, FileParameter>();
        object localVarPostBody = null;

        // to determine the Content-Type header
        string[] localVarHttpContentTypes = new string[]
        {
        };
        var localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

        // to determine the Accept header
        string[] localVarHttpHeaderAccepts = new[]
        {
            "application/json",
            "text/json",
            "text/plain",
            "text/csv",
            "application/problem+json"
        };
        var localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
        if (localVarHttpHeaderAccept != null)
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

        if (languageIsoCode != null)
            localVarQueryParams.AddRange(
                Configuration.ApiClient.ParameterToKeyValuePairs("", "languageIsoCode",
                    languageIsoCode)); // query parameter

        // make the HTTP request
        var localVarResponse = (RestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
            Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams,
            localVarFileParams,
            localVarPathParams, localVarHttpContentType);

        var localVarStatusCode = (int)localVarResponse.StatusCode;

        if (ExceptionFactory != null)
        {
            var exception = ExceptionFactory("CountriesGet", localVarResponse);
            if (exception != null) throw exception;
        }

        return new ApiResponse<List<CountryResponse>>(localVarStatusCode,
            localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
            (List<CountryResponse>)Configuration.ApiClient.Deserialize(localVarResponse,
                typeof(List<CountryResponse>)));
    }

    /// <summary>
    ///     Returns a list of all used languages
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="languageIsoCode">ISO-639-1 code of a language or empty (optional)</param>
    /// <returns>List&lt;LanguageResponse&gt;</returns>
    public List<LanguageResponse> LanguagesGet(string languageIsoCode = null)
    {
        ApiResponse<List<LanguageResponse>> localVarResponse = LanguagesGetWithHttpInfo(languageIsoCode);
        return localVarResponse.Data;
    }

    /// <summary>
    ///     Returns a list of all used languages
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="languageIsoCode">ISO-639-1 code of a language or empty (optional)</param>
    /// <returns>ApiResponse of List&lt;LanguageResponse&gt;</returns>
    public ApiResponse<List<LanguageResponse>> LanguagesGetWithHttpInfo(string languageIsoCode = null)
    {
        var localVarPath = "/Languages";
        var localVarPathParams = new Dictionary<string, string>();
        var localVarQueryParams = new List<KeyValuePair<string, string>>();
        var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
        var localVarFormParams = new Dictionary<string, string>();
        var localVarFileParams = new Dictionary<string, FileParameter>();
        object localVarPostBody = null;

        // to determine the Content-Type header
        string[] localVarHttpContentTypes = new string[]
        {
        };
        var localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

        // to determine the Accept header
        string[] localVarHttpHeaderAccepts = new[]
        {
            "application/json",
            "text/json",
            "text/plain",
            "text/csv",
            "application/problem+json"
        };
        var localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
        if (localVarHttpHeaderAccept != null)
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

        if (languageIsoCode != null)
            localVarQueryParams.AddRange(
                Configuration.ApiClient.ParameterToKeyValuePairs("", "languageIsoCode",
                    languageIsoCode)); // query parameter

        // make the HTTP request
        var localVarResponse = (RestResponse)Configuration.ApiClient.CallApi(localVarPath,
            Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams,
            localVarFileParams,
            localVarPathParams, localVarHttpContentType);

        var localVarStatusCode = (int)localVarResponse.StatusCode;

        if (ExceptionFactory != null)
        {
            var exception = ExceptionFactory("LanguagesGet", localVarResponse);
            if (exception != null) throw exception;
        }

        return new ApiResponse<List<LanguageResponse>>(localVarStatusCode,
            localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
            (List<LanguageResponse>)Configuration.ApiClient.Deserialize(localVarResponse,
                typeof(List<LanguageResponse>)));
    }

    /// <summary>
    ///     Returns a list of all used languages
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="languageIsoCode">ISO-639-1 code of a language or empty (optional)</param>
    /// <returns>Task of List&lt;LanguageResponse&gt;</returns>
    public async Task<List<LanguageResponse>> LanguagesGetAsync(string languageIsoCode = null)
    {
        ApiResponse<List<LanguageResponse>> localVarResponse = await LanguagesGetAsyncWithHttpInfo(languageIsoCode);
        return localVarResponse.Data;
    }

    /// <summary>
    ///     Returns a list of all used languages
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="languageIsoCode">ISO-639-1 code of a language or empty (optional)</param>
    /// <returns>Task of ApiResponse (List&lt;LanguageResponse&gt;)</returns>
    public async Task<ApiResponse<List<LanguageResponse>>> LanguagesGetAsyncWithHttpInfo(string languageIsoCode = null)
    {
        var localVarPath = "/Languages";
        var localVarPathParams = new Dictionary<string, string>();
        var localVarQueryParams = new List<KeyValuePair<string, string>>();
        var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
        var localVarFormParams = new Dictionary<string, string>();
        var localVarFileParams = new Dictionary<string, FileParameter>();
        object localVarPostBody = null;

        // to determine the Content-Type header
        string[] localVarHttpContentTypes = new string[]
        {
        };
        var localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

        // to determine the Accept header
        string[] localVarHttpHeaderAccepts = new[]
        {
            "application/json",
            "text/json",
            "text/plain",
            "text/csv",
            "application/problem+json"
        };
        var localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
        if (localVarHttpHeaderAccept != null)
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

        if (languageIsoCode != null)
            localVarQueryParams.AddRange(
                Configuration.ApiClient.ParameterToKeyValuePairs("", "languageIsoCode",
                    languageIsoCode)); // query parameter

        // make the HTTP request
        var localVarResponse = (RestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
            Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams,
            localVarFileParams,
            localVarPathParams, localVarHttpContentType);

        var localVarStatusCode = (int)localVarResponse.StatusCode;

        if (ExceptionFactory != null)
        {
            var exception = ExceptionFactory("LanguagesGet", localVarResponse);
            if (exception != null) throw exception;
        }

        return new ApiResponse<List<LanguageResponse>>(localVarStatusCode,
            localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
            (List<LanguageResponse>)Configuration.ApiClient.Deserialize(localVarResponse,
                typeof(List<LanguageResponse>)));
    }

    /// <summary>
    ///     Returns a list of relevant subdivisions for a supported country (if any)
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="countryIsoCode">ISO 3166-1 code of the country</param>
    /// <param name="languageIsoCode">ISO-639-1 code of a language or empty (optional)</param>
    /// <returns>List&lt;SubdivisionResponse&gt;</returns>
    public List<SubdivisionResponse> SubdivisionsGet(string countryIsoCode, string languageIsoCode = null)
    {
        ApiResponse<List<SubdivisionResponse>> localVarResponse =
            SubdivisionsGetWithHttpInfo(countryIsoCode, languageIsoCode);
        return localVarResponse.Data;
    }

    /// <summary>
    ///     Returns a list of relevant subdivisions for a supported country (if any)
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="countryIsoCode">ISO 3166-1 code of the country</param>
    /// <param name="languageIsoCode">ISO-639-1 code of a language or empty (optional)</param>
    /// <returns>ApiResponse of List&lt;SubdivisionResponse&gt;</returns>
    public ApiResponse<List<SubdivisionResponse>> SubdivisionsGetWithHttpInfo(string countryIsoCode,
        string languageIsoCode = null)
    {
        // verify the required parameter 'countryIsoCode' is set
        if (countryIsoCode == null)
            throw new ApiException(400,
                "Missing required parameter 'countryIsoCode' when calling RegionalApi->SubdivisionsGet");

        var localVarPath = "/Subdivisions";
        var localVarPathParams = new Dictionary<string, string>();
        var localVarQueryParams = new List<KeyValuePair<string, string>>();
        var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
        var localVarFormParams = new Dictionary<string, string>();
        var localVarFileParams = new Dictionary<string, FileParameter>();
        object localVarPostBody = null;

        // to determine the Content-Type header
        string[] localVarHttpContentTypes = new string[]
        {
        };
        var localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

        // to determine the Accept header
        string[] localVarHttpHeaderAccepts = new[]
        {
            "application/json",
            "text/json",
            "text/plain",
            "text/csv",
            "application/problem+json"
        };
        var localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
        if (localVarHttpHeaderAccept != null)
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

        if (countryIsoCode != null)
            localVarQueryParams.AddRange(
                Configuration.ApiClient.ParameterToKeyValuePairs("", "countryIsoCode",
                    countryIsoCode)); // query parameter
        if (languageIsoCode != null)
            localVarQueryParams.AddRange(
                Configuration.ApiClient.ParameterToKeyValuePairs("", "languageIsoCode",
                    languageIsoCode)); // query parameter

        // make the HTTP request
        var localVarResponse = (RestResponse)Configuration.ApiClient.CallApi(localVarPath,
            Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams,
            localVarFileParams,
            localVarPathParams, localVarHttpContentType);

        var localVarStatusCode = (int)localVarResponse.StatusCode;

        if (ExceptionFactory != null)
        {
            var exception = ExceptionFactory("SubdivisionsGet", localVarResponse);
            if (exception != null) throw exception;
        }

        return new ApiResponse<List<SubdivisionResponse>>(localVarStatusCode,
            localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
            (List<SubdivisionResponse>)Configuration.ApiClient.Deserialize(localVarResponse,
                typeof(List<SubdivisionResponse>)));
    }

    /// <summary>
    ///     Returns a list of relevant subdivisions for a supported country (if any)
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="countryIsoCode">ISO 3166-1 code of the country</param>
    /// <param name="languageIsoCode">ISO-639-1 code of a language or empty (optional)</param>
    /// <returns>Task of List&lt;SubdivisionResponse&gt;</returns>
    public async Task<List<SubdivisionResponse>> SubdivisionsGetAsync(string countryIsoCode,
        string languageIsoCode = null)
    {
        ApiResponse<List<SubdivisionResponse>> localVarResponse =
            await SubdivisionsGetAsyncWithHttpInfo(countryIsoCode, languageIsoCode);
        return localVarResponse.Data;
    }

    /// <summary>
    ///     Returns a list of relevant subdivisions for a supported country (if any)
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="countryIsoCode">ISO 3166-1 code of the country</param>
    /// <param name="languageIsoCode">ISO-639-1 code of a language or empty (optional)</param>
    /// <returns>Task of ApiResponse (List&lt;SubdivisionResponse&gt;)</returns>
    public async Task<ApiResponse<List<SubdivisionResponse>>> SubdivisionsGetAsyncWithHttpInfo(string countryIsoCode,
        string languageIsoCode = null)
    {
        // verify the required parameter 'countryIsoCode' is set
        if (countryIsoCode == null)
            throw new ApiException(400,
                "Missing required parameter 'countryIsoCode' when calling RegionalApi->SubdivisionsGet");

        var localVarPath = "/Subdivisions";
        var localVarPathParams = new Dictionary<string, string>();
        var localVarQueryParams = new List<KeyValuePair<string, string>>();
        var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
        var localVarFormParams = new Dictionary<string, string>();
        var localVarFileParams = new Dictionary<string, FileParameter>();
        object localVarPostBody = null;

        // to determine the Content-Type header
        string[] localVarHttpContentTypes = new string[]
        {
        };
        var localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

        // to determine the Accept header
        string[] localVarHttpHeaderAccepts = new[]
        {
            "application/json",
            "text/json",
            "text/plain",
            "text/csv",
            "application/problem+json"
        };
        var localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
        if (localVarHttpHeaderAccept != null)
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

        if (countryIsoCode != null)
            localVarQueryParams.AddRange(
                Configuration.ApiClient.ParameterToKeyValuePairs("", "countryIsoCode",
                    countryIsoCode)); // query parameter
        if (languageIsoCode != null)
            localVarQueryParams.AddRange(
                Configuration.ApiClient.ParameterToKeyValuePairs("", "languageIsoCode",
                    languageIsoCode)); // query parameter

        // make the HTTP request
        var localVarResponse = (RestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
            Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams,
            localVarFileParams,
            localVarPathParams, localVarHttpContentType);

        var localVarStatusCode = (int)localVarResponse.StatusCode;

        if (ExceptionFactory != null)
        {
            var exception = ExceptionFactory("SubdivisionsGet", localVarResponse);
            if (exception != null) throw exception;
        }

        return new ApiResponse<List<SubdivisionResponse>>(localVarStatusCode,
            localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
            (List<SubdivisionResponse>)Configuration.ApiClient.Deserialize(localVarResponse,
                typeof(List<SubdivisionResponse>)));
    }

    /// <summary>
    ///     Sets the base path of the API client.
    /// </summary>
    /// <value>The base path</value>
    [Obsolete(
        "SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
    public void SetBasePath(string basePath)
    {
        // do nothing
    }

    /// <summary>
    ///     Gets the default header.
    /// </summary>
    /// <returns>Dictionary of HTTP header</returns>
    [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
    public IDictionary<string, string> DefaultHeader()
    {
        return new ReadOnlyDictionary<string, string>(Configuration.DefaultHeader);
    }

    /// <summary>
    ///     Add default header.
    /// </summary>
    /// <param name="key">Header field name.</param>
    /// <param name="value">Header field value.</param>
    /// <returns></returns>
    [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
    public void AddDefaultHeader(string key, string value)
    {
        Configuration.AddDefaultHeader(key, value);
    }
}