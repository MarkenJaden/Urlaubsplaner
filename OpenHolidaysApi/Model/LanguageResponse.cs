/*
 * OpenHolidays API v1
 *
 * Open Data API for public and school holidays
 *
 * OpenAPI spec version: v1
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace OpenHolidaysApi.Model;

/// <summary>
///     Representation of a language as defined in ISO-639-1
/// </summary>
[DataContract]
public class LanguageResponse : IEquatable<LanguageResponse>, IValidatableObject
{
    /// <summary>
    ///     Initializes a new instance of the <see cref="LanguageResponse" /> class.
    /// </summary>
    /// <param name="isoCode">ISO-639-1 language code (required).</param>
    /// <param name="name">Localized language names (required).</param>
    public LanguageResponse(string isoCode = default, List<LocalizedText> name = default)
    {
        // to ensure "isoCode" is required (not null)

        IsoCode = isoCode ??
                  throw new InvalidDataException(
                      "isoCode is a required property for LanguageResponse and cannot be null");
        // to ensure "name" is required (not null)

        Name = name ??
               throw new InvalidDataException("name is a required property for LanguageResponse and cannot be null");
    }

    /// <summary>
    ///     ISO-639-1 language code
    /// </summary>
    /// <value>ISO-639-1 language code</value>
    [DataMember(Name = "isoCode", EmitDefaultValue = false)]
    public string IsoCode { get; set; }

    /// <summary>
    ///     Localized language names
    /// </summary>
    /// <value>Localized language names</value>
    [DataMember(Name = "name", EmitDefaultValue = false)]
    public List<LocalizedText> Name { get; set; }

    /// <summary>
    ///     Returns true if LanguageResponse instances are equal
    /// </summary>
    /// <param name="input">Instance of LanguageResponse to be compared</param>
    /// <returns>Boolean</returns>
    public bool Equals(LanguageResponse input)
    {
        if (input == null)
            return false;

        return
            (
                IsoCode == input.IsoCode ||
                (IsoCode != null &&
                 IsoCode.Equals(input.IsoCode))
            ) &&
            (
                Name == input.Name ||
                (Name != null &&
                 input.Name != null &&
                 Name.SequenceEqual(input.Name))
            );
    }

    /// <summary>
    ///     To validate all properties of the instance
    /// </summary>
    /// <param name="validationContext">Validation context</param>
    /// <returns>Validation Result</returns>
    IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
    {
        yield break;
    }

    /// <summary>
    ///     Returns the string presentation of the object
    /// </summary>
    /// <returns>String presentation of the object</returns>
    public override string ToString()
    {
        var sb = new StringBuilder();
        sb.Append("class LanguageResponse {\n");
        sb.Append("  IsoCode: ").Append(IsoCode).Append("\n");
        sb.Append("  Name: ").Append(Name).Append("\n");
        sb.Append("}\n");
        return sb.ToString();
    }

    /// <summary>
    ///     Returns the JSON string presentation of the object
    /// </summary>
    /// <returns>JSON string presentation of the object</returns>
    public virtual string ToJson()
    {
        return JsonConvert.SerializeObject(this, Formatting.Indented);
    }

    /// <summary>
    ///     Returns true if objects are equal
    /// </summary>
    /// <param name="input">Object to be compared</param>
    /// <returns>Boolean</returns>
    public override bool Equals(object input)
    {
        return Equals(input as LanguageResponse);
    }

    /// <summary>
    ///     Gets the hash code
    /// </summary>
    /// <returns>Hash code</returns>
    public override int GetHashCode()
    {
        unchecked // Overflow is fine, just wrap
        {
            var hashCode = 41;
            if (IsoCode != null)
                hashCode = hashCode * 59 + IsoCode.GetHashCode();
            if (Name != null)
                hashCode = hashCode * 59 + Name.GetHashCode();
            return hashCode;
        }
    }
}