/*
 * OpenHolidays API v1
 *
 * Open Data API for public and school holidays
 *
 * OpenAPI spec version: v1
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace OpenHolidaysApi.Model;

/// <summary>
///     A localized text string
/// </summary>
[DataContract]
public class LocalizedText : IEquatable<LocalizedText>, IValidatableObject
{
    /// <summary>
    ///     Initializes a new instance of the <see cref="LocalizedText" /> class.
    /// </summary>
    /// <param name="language">ISO-639-1 language code (required).</param>
    /// <param name="text">The localized text (required).</param>
    public LocalizedText(string language = default, string text = default)
    {
        // to ensure "language" is required (not null)

        Language = language ??
                   throw new InvalidDataException(
                       "language is a required property for LocalizedText and cannot be null");
        // to ensure "text" is required (not null)

        Text = text ??
               throw new InvalidDataException("text is a required property for LocalizedText and cannot be null");
    }

    /// <summary>
    ///     ISO-639-1 language code
    /// </summary>
    /// <value>ISO-639-1 language code</value>
    [DataMember(Name = "language", EmitDefaultValue = false)]
    public string Language { get; set; }

    /// <summary>
    ///     The localized text
    /// </summary>
    /// <value>The localized text</value>
    [DataMember(Name = "text", EmitDefaultValue = false)]
    public string Text { get; set; }

    /// <summary>
    ///     Returns true if LocalizedText instances are equal
    /// </summary>
    /// <param name="input">Instance of LocalizedText to be compared</param>
    /// <returns>Boolean</returns>
    public bool Equals(LocalizedText input)
    {
        if (input == null)
            return false;

        return
            (
                Language == input.Language ||
                (Language != null &&
                 Language.Equals(input.Language))
            ) &&
            (
                Text == input.Text ||
                (Text != null &&
                 Text.Equals(input.Text))
            );
    }

    /// <summary>
    ///     To validate all properties of the instance
    /// </summary>
    /// <param name="validationContext">Validation context</param>
    /// <returns>Validation Result</returns>
    IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
    {
        yield break;
    }

    /// <summary>
    ///     Returns the string presentation of the object
    /// </summary>
    /// <returns>String presentation of the object</returns>
    public override string ToString()
    {
        var sb = new StringBuilder();
        sb.Append("class LocalizedText {\n");
        sb.Append("  Language: ").Append(Language).Append("\n");
        sb.Append("  Text: ").Append(Text).Append("\n");
        sb.Append("}\n");
        return sb.ToString();
    }

    /// <summary>
    ///     Returns the JSON string presentation of the object
    /// </summary>
    /// <returns>JSON string presentation of the object</returns>
    public virtual string ToJson()
    {
        return JsonConvert.SerializeObject(this, Formatting.Indented);
    }

    /// <summary>
    ///     Returns true if objects are equal
    /// </summary>
    /// <param name="input">Object to be compared</param>
    /// <returns>Boolean</returns>
    public override bool Equals(object input)
    {
        return Equals(input as LocalizedText);
    }

    /// <summary>
    ///     Gets the hash code
    /// </summary>
    /// <returns>Hash code</returns>
    public override int GetHashCode()
    {
        unchecked // Overflow is fine, just wrap
        {
            var hashCode = 41;
            if (Language != null)
                hashCode = hashCode * 59 + Language.GetHashCode();
            if (Text != null)
                hashCode = hashCode * 59 + Text.GetHashCode();
            return hashCode;
        }
    }
}