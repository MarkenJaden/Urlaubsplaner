/*
 * OpenHolidays API v1
 *
 * Open Data API for public and school holidays
 *
 * OpenAPI spec version: v1
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;
using SwaggerDateConverter = OpenHolidaysApi.Client.SwaggerDateConverter;

namespace OpenHolidaysApi.Model;

/// <summary>
///     Statistical data of the holidays database
/// </summary>
[DataContract]
public class StatisticsResponse : IEquatable<StatisticsResponse>, IValidatableObject
{
    /// <summary>
    ///     Initializes a new instance of the <see cref="StatisticsResponse" /> class.
    /// </summary>
    /// <param name="youngestStartDate">The youngest holiday start date in the database (required).</param>
    /// <param name="oldestStartDate">The oldest holiday start date in the database (required).</param>
    public StatisticsResponse(DateTime? youngestStartDate = default, DateTime? oldestStartDate = default)
    {
        // to ensure "youngestStartDate" is required (not null)
        if (youngestStartDate == null)
            throw new InvalidDataException(
                "youngestStartDate is a required property for StatisticsResponse and cannot be null");

        YoungestStartDate = youngestStartDate;
        // to ensure "oldestStartDate" is required (not null)
        if (oldestStartDate == null)
            throw new InvalidDataException(
                "oldestStartDate is a required property for StatisticsResponse and cannot be null");

        OldestStartDate = oldestStartDate;
    }

    /// <summary>
    ///     The youngest holiday start date in the database
    /// </summary>
    /// <value>The youngest holiday start date in the database</value>
    [DataMember(Name = "youngestStartDate", EmitDefaultValue = false)]
    [JsonConverter(typeof(SwaggerDateConverter))]
    public DateTime? YoungestStartDate { get; set; }

    /// <summary>
    ///     The oldest holiday start date in the database
    /// </summary>
    /// <value>The oldest holiday start date in the database</value>
    [DataMember(Name = "oldestStartDate", EmitDefaultValue = false)]
    [JsonConverter(typeof(SwaggerDateConverter))]
    public DateTime? OldestStartDate { get; set; }

    /// <summary>
    ///     Returns true if StatisticsResponse instances are equal
    /// </summary>
    /// <param name="input">Instance of StatisticsResponse to be compared</param>
    /// <returns>Boolean</returns>
    public bool Equals(StatisticsResponse input)
    {
        if (input == null)
            return false;

        return
            (
                YoungestStartDate == input.YoungestStartDate ||
                (YoungestStartDate != null &&
                 YoungestStartDate.Equals(input.YoungestStartDate))
            ) &&
            (
                OldestStartDate == input.OldestStartDate ||
                (OldestStartDate != null &&
                 OldestStartDate.Equals(input.OldestStartDate))
            );
    }

    /// <summary>
    ///     To validate all properties of the instance
    /// </summary>
    /// <param name="validationContext">Validation context</param>
    /// <returns>Validation Result</returns>
    IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
    {
        yield break;
    }

    /// <summary>
    ///     Returns the string presentation of the object
    /// </summary>
    /// <returns>String presentation of the object</returns>
    public override string ToString()
    {
        var sb = new StringBuilder();
        sb.Append("class StatisticsResponse {\n");
        sb.Append("  YoungestStartDate: ").Append(YoungestStartDate).Append("\n");
        sb.Append("  OldestStartDate: ").Append(OldestStartDate).Append("\n");
        sb.Append("}\n");
        return sb.ToString();
    }

    /// <summary>
    ///     Returns the JSON string presentation of the object
    /// </summary>
    /// <returns>JSON string presentation of the object</returns>
    public virtual string ToJson()
    {
        return JsonConvert.SerializeObject(this, Formatting.Indented);
    }

    /// <summary>
    ///     Returns true if objects are equal
    /// </summary>
    /// <param name="input">Object to be compared</param>
    /// <returns>Boolean</returns>
    public override bool Equals(object input)
    {
        return Equals(input as StatisticsResponse);
    }

    /// <summary>
    ///     Gets the hash code
    /// </summary>
    /// <returns>Hash code</returns>
    public override int GetHashCode()
    {
        unchecked // Overflow is fine, just wrap
        {
            var hashCode = 41;
            if (YoungestStartDate != null)
                hashCode = hashCode * 59 + YoungestStartDate.GetHashCode();
            if (OldestStartDate != null)
                hashCode = hashCode * 59 + OldestStartDate.GetHashCode();
            return hashCode;
        }
    }
}