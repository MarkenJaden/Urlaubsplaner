/*
 * OpenHolidays API v1
 *
 * Open Data API for public and school holidays
 *
 * OpenAPI spec version: v1
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace OpenHolidaysApi.Model;

/// <summary>
///     Representation of a subdivision
/// </summary>
[DataContract]
public class SubdivisionResponse : IEquatable<SubdivisionResponse>, IValidatableObject
{
    /// <summary>
    ///     Initializes a new instance of the <see cref="SubdivisionResponse" /> class.
    /// </summary>
    /// <param name="category">Localized categories of the subdivision (required).</param>
    /// <param name="children">Child subdivisions.</param>
    /// <param name="code">Subdivision code (required).</param>
    /// <param name="comment">Localized comments of the subdivision (required).</param>
    /// <param name="isoCode">ISO 3166-2 subdivision code (if defined).</param>
    /// <param name="name">Localized names of the subdivision (required).</param>
    /// <param name="officialLanguages">Official languages as ISO-639-1 codes (required).</param>
    /// <param name="shortName">Short name for display (required).</param>
    public SubdivisionResponse(List<LocalizedText> category = default, List<SubdivisionResponse> children = default,
        string code = default, List<LocalizedText> comment = default, string isoCode = default,
        List<LocalizedText> name = default, List<string> officialLanguages = default, string shortName = default)
    {
        // to ensure "category" is required (not null)

        Category = category ??
                   throw new InvalidDataException(
                       "category is a required property for SubdivisionResponse and cannot be null");
        // to ensure "code" is required (not null)

        Code = code ??
               throw new InvalidDataException("code is a required property for SubdivisionResponse and cannot be null");

        Comment = comment;
        // to ensure "name" is required (not null)

        Name = name ??
               throw new InvalidDataException("name is a required property for SubdivisionResponse and cannot be null");
        // to ensure "officialLanguages" is required (not null)

        OfficialLanguages = officialLanguages ??
                            throw new InvalidDataException(
                                "officialLanguages is a required property for SubdivisionResponse and cannot be null");
        // to ensure "shortName" is required (not null)

        ShortName = shortName ??
                    throw new InvalidDataException(
                        "shortName is a required property for SubdivisionResponse and cannot be null");
        Children = children;
        IsoCode = isoCode;
    }

    /// <summary>
    ///     Localized categories of the subdivision
    /// </summary>
    /// <value>Localized categories of the subdivision</value>
    [DataMember(Name = "category", EmitDefaultValue = false)]
    public List<LocalizedText> Category { get; set; }

    /// <summary>
    ///     Child subdivisions
    /// </summary>
    /// <value>Child subdivisions</value>
    [DataMember(Name = "children", EmitDefaultValue = false)]
    public List<SubdivisionResponse> Children { get; set; }

    /// <summary>
    ///     Subdivision code
    /// </summary>
    /// <value>Subdivision code</value>
    [DataMember(Name = "code", EmitDefaultValue = false)]
    public string Code { get; set; }

    /// <summary>
    ///     Localized comments of the subdivision
    /// </summary>
    /// <value>Localized comments of the subdivision</value>
    [DataMember(Name = "comment", EmitDefaultValue = false)]
    public List<LocalizedText> Comment { get; set; }

    /// <summary>
    ///     ISO 3166-2 subdivision code (if defined)
    /// </summary>
    /// <value>ISO 3166-2 subdivision code (if defined)</value>
    [DataMember(Name = "isoCode", EmitDefaultValue = false)]
    public string IsoCode { get; set; }

    /// <summary>
    ///     Localized names of the subdivision
    /// </summary>
    /// <value>Localized names of the subdivision</value>
    [DataMember(Name = "name", EmitDefaultValue = false)]
    public List<LocalizedText> Name { get; set; }

    /// <summary>
    ///     Official languages as ISO-639-1 codes
    /// </summary>
    /// <value>Official languages as ISO-639-1 codes</value>
    [DataMember(Name = "officialLanguages", EmitDefaultValue = false)]
    public List<string> OfficialLanguages { get; set; }

    /// <summary>
    ///     Short name for display
    /// </summary>
    /// <value>Short name for display</value>
    [DataMember(Name = "shortName", EmitDefaultValue = false)]
    public string ShortName { get; set; }

    /// <summary>
    ///     Returns true if SubdivisionResponse instances are equal
    /// </summary>
    /// <param name="input">Instance of SubdivisionResponse to be compared</param>
    /// <returns>Boolean</returns>
    public bool Equals(SubdivisionResponse input)
    {
        if (input == null)
            return false;

        return
            (
                Category == input.Category ||
                (Category != null &&
                 input.Category != null &&
                 Category.SequenceEqual(input.Category))
            ) &&
            (
                Children == input.Children ||
                (Children != null &&
                 input.Children != null &&
                 Children.SequenceEqual(input.Children))
            ) &&
            (
                Code == input.Code ||
                (Code != null &&
                 Code.Equals(input.Code))
            ) &&
            (
                Comment == input.Comment ||
                (Comment != null &&
                 input.Comment != null &&
                 Comment.SequenceEqual(input.Comment))
            ) &&
            (
                IsoCode == input.IsoCode ||
                (IsoCode != null &&
                 IsoCode.Equals(input.IsoCode))
            ) &&
            (
                Name == input.Name ||
                (Name != null &&
                 input.Name != null &&
                 Name.SequenceEqual(input.Name))
            ) &&
            (
                OfficialLanguages == input.OfficialLanguages ||
                (OfficialLanguages != null &&
                 input.OfficialLanguages != null &&
                 OfficialLanguages.SequenceEqual(input.OfficialLanguages))
            ) &&
            (
                ShortName == input.ShortName ||
                (ShortName != null &&
                 ShortName.Equals(input.ShortName))
            );
    }

    /// <summary>
    ///     To validate all properties of the instance
    /// </summary>
    /// <param name="validationContext">Validation context</param>
    /// <returns>Validation Result</returns>
    IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
    {
        yield break;
    }

    /// <summary>
    ///     Returns the string presentation of the object
    /// </summary>
    /// <returns>String presentation of the object</returns>
    public override string ToString()
    {
        var sb = new StringBuilder();
        sb.Append("class SubdivisionResponse {\n");
        sb.Append("  Category: ").Append(Category).Append("\n");
        sb.Append("  Children: ").Append(Children).Append("\n");
        sb.Append("  Code: ").Append(Code).Append("\n");
        sb.Append("  Comment: ").Append(Comment).Append("\n");
        sb.Append("  IsoCode: ").Append(IsoCode).Append("\n");
        sb.Append("  Name: ").Append(Name).Append("\n");
        sb.Append("  OfficialLanguages: ").Append(OfficialLanguages).Append("\n");
        sb.Append("  ShortName: ").Append(ShortName).Append("\n");
        sb.Append("}\n");
        return sb.ToString();
    }

    /// <summary>
    ///     Returns the JSON string presentation of the object
    /// </summary>
    /// <returns>JSON string presentation of the object</returns>
    public virtual string ToJson()
    {
        return JsonConvert.SerializeObject(this, Formatting.Indented);
    }

    /// <summary>
    ///     Returns true if objects are equal
    /// </summary>
    /// <param name="input">Object to be compared</param>
    /// <returns>Boolean</returns>
    public override bool Equals(object input)
    {
        return Equals(input as SubdivisionResponse);
    }

    /// <summary>
    ///     Gets the hash code
    /// </summary>
    /// <returns>Hash code</returns>
    public override int GetHashCode()
    {
        unchecked // Overflow is fine, just wrap
        {
            var hashCode = 41;
            if (Category != null)
                hashCode = hashCode * 59 + Category.GetHashCode();
            if (Children != null)
                hashCode = hashCode * 59 + Children.GetHashCode();
            if (Code != null)
                hashCode = hashCode * 59 + Code.GetHashCode();
            if (Comment != null)
                hashCode = hashCode * 59 + Comment.GetHashCode();
            if (IsoCode != null)
                hashCode = hashCode * 59 + IsoCode.GetHashCode();
            if (Name != null)
                hashCode = hashCode * 59 + Name.GetHashCode();
            if (OfficialLanguages != null)
                hashCode = hashCode * 59 + OfficialLanguages.GetHashCode();
            if (ShortName != null)
                hashCode = hashCode * 59 + ShortName.GetHashCode();
            return hashCode;
        }
    }
}