/*
 * OpenHolidays API v1
 *
 * Open Data API for public and school holidays
 *
 * OpenAPI spec version: v1
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace OpenHolidaysApi.Model;

/// <summary>
///     Representation of a holiday by date
/// </summary>
[DataContract]
public class HolidayByDateResponse : IEquatable<HolidayByDateResponse>, IValidatableObject
{
    /// <summary>
    ///     Initializes a new instance of the <see cref="HolidayByDateResponse" /> class.
    /// </summary>
    /// <param name="comment">Additional localized comments.</param>
    /// <param name="country">country (required).</param>
    /// <param name="id">Unqiue holiday id (required).</param>
    /// <param name="name">Localized names of the holiday (required).</param>
    /// <param name="nationwide">Is the holiday nationwide? (required).</param>
    /// <param name="regionalScope">regionalScope.</param>
    /// <param name="subdivisions">List of subdivision references (required).</param>
    /// <param name="temporalScope">temporalScope.</param>
    /// <param name="type">type (required).</param>
    public HolidayByDateResponse(List<LocalizedText> comment = default, CountryReference country = default,
        Guid? id = default, List<LocalizedText> name = default, bool? nationwide = default,
        RegionalScope regionalScope = default, List<SubdivisionReference> subdivisions = default,
        TemporalScope temporalScope = default, HolidayType type = default)
    {
        // to ensure "country" is required (not null)

        Country = country ??
                  throw new InvalidDataException(
                      "country is a required property for HolidayByDateResponse and cannot be null");
        // to ensure "id" is required (not null)
        if (id == null)
            throw new InvalidDataException("id is a required property for HolidayByDateResponse and cannot be null");

        Id = id;
        // to ensure "name" is required (not null)

        Name = name ??
               throw new InvalidDataException(
                   "name is a required property for HolidayByDateResponse and cannot be null");
        // to ensure "nationwide" is required (not null)
        if (nationwide == null)
            throw new InvalidDataException(
                "nationwide is a required property for HolidayByDateResponse and cannot be null");

        Nationwide = nationwide;
        // to ensure "subdivisions" is required (not null)

        Subdivisions = subdivisions ??
                       throw new InvalidDataException(
                           "subdivisions is a required property for HolidayByDateResponse and cannot be null");
        // to ensure "type" is required (not null)
        if (type == null)
            throw new InvalidDataException("type is a required property for HolidayByDateResponse and cannot be null");

        Type = type;
        Comment = comment;
        RegionalScope = regionalScope;
        TemporalScope = temporalScope;
    }

    /// <summary>
    ///     Additional localized comments
    /// </summary>
    /// <value>Additional localized comments</value>
    [DataMember(Name = "comment", EmitDefaultValue = false)]
    public List<LocalizedText> Comment { get; set; }

    /// <summary>
    ///     Gets or Sets Country
    /// </summary>
    [DataMember(Name = "country", EmitDefaultValue = false)]
    public CountryReference Country { get; set; }

    /// <summary>
    ///     Unqiue holiday id
    /// </summary>
    /// <value>Unqiue holiday id</value>
    [DataMember(Name = "id", EmitDefaultValue = false)]
    public Guid? Id { get; set; }

    /// <summary>
    ///     Localized names of the holiday
    /// </summary>
    /// <value>Localized names of the holiday</value>
    [DataMember(Name = "name", EmitDefaultValue = false)]
    public List<LocalizedText> Name { get; set; }

    /// <summary>
    ///     Is the holiday nationwide?
    /// </summary>
    /// <value>Is the holiday nationwide?</value>
    [DataMember(Name = "nationwide", EmitDefaultValue = false)]
    public bool? Nationwide { get; set; }

    /// <summary>
    ///     Gets or Sets RegionalScope
    /// </summary>
    [DataMember(Name = "regionalScope", EmitDefaultValue = false)]
    public RegionalScope RegionalScope { get; set; }

    /// <summary>
    ///     List of subdivision references
    /// </summary>
    /// <value>List of subdivision references</value>
    [DataMember(Name = "subdivisions", EmitDefaultValue = false)]
    public List<SubdivisionReference> Subdivisions { get; set; }

    /// <summary>
    ///     Gets or Sets TemporalScope
    /// </summary>
    [DataMember(Name = "temporalScope", EmitDefaultValue = false)]
    public TemporalScope TemporalScope { get; set; }

    /// <summary>
    ///     Gets or Sets Type
    /// </summary>
    [DataMember(Name = "type", EmitDefaultValue = false)]
    public HolidayType Type { get; set; }

    /// <summary>
    ///     Returns true if HolidayByDateResponse instances are equal
    /// </summary>
    /// <param name="input">Instance of HolidayByDateResponse to be compared</param>
    /// <returns>Boolean</returns>
    public bool Equals(HolidayByDateResponse input)
    {
        if (input == null)
            return false;

        return
            (
                Comment == input.Comment ||
                (Comment != null &&
                 input.Comment != null &&
                 Comment.SequenceEqual(input.Comment))
            ) &&
            (
                Country == input.Country ||
                (Country != null &&
                 Country.Equals(input.Country))
            ) &&
            (
                Id == input.Id ||
                (Id != null &&
                 Id.Equals(input.Id))
            ) &&
            (
                Name == input.Name ||
                (Name != null &&
                 input.Name != null &&
                 Name.SequenceEqual(input.Name))
            ) &&
            (
                Nationwide == input.Nationwide ||
                (Nationwide != null &&
                 Nationwide.Equals(input.Nationwide))
            ) &&
            (
                RegionalScope == input.RegionalScope ||
                (RegionalScope != null &&
                 RegionalScope.Equals(input.RegionalScope))
            ) &&
            (
                Subdivisions == input.Subdivisions ||
                (Subdivisions != null &&
                 input.Subdivisions != null &&
                 Subdivisions.SequenceEqual(input.Subdivisions))
            ) &&
            (
                TemporalScope == input.TemporalScope ||
                (TemporalScope != null &&
                 TemporalScope.Equals(input.TemporalScope))
            ) &&
            (
                Type == input.Type ||
                (Type != null &&
                 Type.Equals(input.Type))
            );
    }

    /// <summary>
    ///     To validate all properties of the instance
    /// </summary>
    /// <param name="validationContext">Validation context</param>
    /// <returns>Validation Result</returns>
    IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
    {
        yield break;
    }

    /// <summary>
    ///     Returns the string presentation of the object
    /// </summary>
    /// <returns>String presentation of the object</returns>
    public override string ToString()
    {
        var sb = new StringBuilder();
        sb.Append("class HolidayByDateResponse {\n");
        sb.Append("  Comment: ").Append(Comment).Append("\n");
        sb.Append("  Country: ").Append(Country).Append("\n");
        sb.Append("  Id: ").Append(Id).Append("\n");
        sb.Append("  Name: ").Append(Name).Append("\n");
        sb.Append("  Nationwide: ").Append(Nationwide).Append("\n");
        sb.Append("  RegionalScope: ").Append(RegionalScope).Append("\n");
        sb.Append("  Subdivisions: ").Append(Subdivisions).Append("\n");
        sb.Append("  TemporalScope: ").Append(TemporalScope).Append("\n");
        sb.Append("  Type: ").Append(Type).Append("\n");
        sb.Append("}\n");
        return sb.ToString();
    }

    /// <summary>
    ///     Returns the JSON string presentation of the object
    /// </summary>
    /// <returns>JSON string presentation of the object</returns>
    public virtual string ToJson()
    {
        return JsonConvert.SerializeObject(this, Formatting.Indented);
    }

    /// <summary>
    ///     Returns true if objects are equal
    /// </summary>
    /// <param name="input">Object to be compared</param>
    /// <returns>Boolean</returns>
    public override bool Equals(object input)
    {
        return Equals(input as HolidayByDateResponse);
    }

    /// <summary>
    ///     Gets the hash code
    /// </summary>
    /// <returns>Hash code</returns>
    public override int GetHashCode()
    {
        unchecked // Overflow is fine, just wrap
        {
            var hashCode = 41;
            if (Comment != null)
                hashCode = hashCode * 59 + Comment.GetHashCode();
            if (Country != null)
                hashCode = hashCode * 59 + Country.GetHashCode();
            if (Id != null)
                hashCode = hashCode * 59 + Id.GetHashCode();
            if (Name != null)
                hashCode = hashCode * 59 + Name.GetHashCode();
            if (Nationwide != null)
                hashCode = hashCode * 59 + Nationwide.GetHashCode();
            if (RegionalScope != null)
                hashCode = hashCode * 59 + RegionalScope.GetHashCode();
            if (Subdivisions != null)
                hashCode = hashCode * 59 + Subdivisions.GetHashCode();
            if (TemporalScope != null)
                hashCode = hashCode * 59 + TemporalScope.GetHashCode();
            if (Type != null)
                hashCode = hashCode * 59 + Type.GetHashCode();
            return hashCode;
        }
    }
}