@page "/"
@using OpenHolidaysApi.Api
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@inject DialogService DialogService
@inject ContextMenuService ContextMenuService
@inject TooltipService TooltipService
@inject NotificationService NotificationService
@inject Microsoft.Extensions.Localization.IStringLocalizer<Index> L
<PageTitle>Urlaubsplaner</PageTitle>
<RadzenRow Gap="5" RowGap="5">
    <RadzenColumn Size="12">
        <RadzenStack Gap="20px" JustifyContent="JustifyContent.Center">

            <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Center">
                <RadzenStack AlignItems="AlignItems.Center">
                    <RadzenText Text="Feiertage" TextStyle="TextStyle.DisplayH4"></RadzenText>
                    <RadzenStack Orientation="Orientation.Horizontal">
                        <RadzenDropDown @bind-Value="_selectedPublicHolidayCountries" Data="_countries" Change="GetAllMarkings" TextProperty="@nameof(Country.Name)" Multiple="true" Chips="true" AllowClear="true" AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" Placeholder="Land" FilterPlaceholder="Deutschland" />
                        <RadzenDropDown @bind-Value="_selectedPublicHolidaySubdivisions" Data="_subdivisions" Change="GetAllMarkings" TextProperty="@nameof(Subdivision.Name)" Multiple="true" Chips="true" AllowClear="true" AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" Placeholder="Bundesland" FilterPlaceholder="Deutschland" />
                    </RadzenStack>
                </RadzenStack>

                <RadzenStack AlignItems="AlignItems.Center">
                    <RadzenText Text="Ferien" TextStyle="TextStyle.DisplayH4"></RadzenText>
                    <RadzenStack Orientation="Orientation.Horizontal">
                        <RadzenDropDown @bind-Value="_selectedSchoolHolidayCountries" Data="_countries" Change="GetAllMarkings" TextProperty="@nameof(Country.Name)" Multiple="true" Chips="true" AllowClear="true" AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" Placeholder="Land" FilterPlaceholder="Deutschland" />
                        <RadzenDropDown @bind-Value="_selectedSchoolHolidaySubdivisions" Data="_subdivisions" Change="GetAllMarkings" TextProperty="@nameof(Subdivision.Name)" Multiple="true" Chips="true" AllowClear="true" AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" Placeholder="Bundesland" FilterPlaceholder="Deutschland" />
                    </RadzenStack>
                </RadzenStack>
            </RadzenStack>

            <RadzenScheduler @ref="scheduler" Data="_markings" TItem="Marking" SlotRender="SlotRender" AppointmentRender="AppointmentRender" style="height: 800px;" StartProperty="Start" EndProperty="End" TextProperty="Name">
                <RadzenYearPlannerView @ref="yearPlannerView"></RadzenYearPlannerView>
                <RadzenYearView @ref="yearView"></RadzenYearView>
            </RadzenScheduler>
        </RadzenStack>



        @* <RadzenCard Style="margin-top: 40px; padding: 20px 40px 40px;">
            <RadzenRow>
                <RadzenColumn Size="12" SizeMD="4">
                    <RadzenIcon Icon="smart_button" Style="margin-top: 20px; width: 48px; height: 48px; font-size: 48px; color: var(--rz-text-title-color);"></RadzenIcon>
                    <RadzenText Text="Learn the Fundamentals" TextStyle="Radzen.Blazor.TextStyle.DisplayH6" TagName="Radzen.Blazor.TagName.H3"></RadzenText>
                    <RadzenLink Text="Docs" Path="https://www.radzen.com/blazor-studio/documentation/" Icon="east" Target="_blank" Style="font-size: 18px"></RadzenLink>
                    <RadzenLink Text="Videos" Path="https://youtube.com/playlist?list=PLQyJPeb3xHcBij_RbHD__2TOo8Jv5HQVc" Icon="east" Target="_blank" Style="display: block; font-size: 18px"></RadzenLink>
                </RadzenColumn>
                <RadzenColumn Size="12" SizeMD="4">
                    <RadzenIcon Icon="code" Style="margin-top: 20px; width: 48px; height: 48px; font-size: 48px; color: var(--rz-text-title-color);"></RadzenIcon>
                    <RadzenText Text="Radzen Blazor Components" TextStyle="Radzen.Blazor.TextStyle.DisplayH6" TagName="Radzen.Blazor.TagName.H3"></RadzenText>
                    <RadzenLink Text="Demos" Path="https://blazor.radzen.com" Icon="east" Target="_blank" Style="font-size: 18px"></RadzenLink>
                </RadzenColumn>
                <RadzenColumn Size="12" SizeMD="4">
                    <RadzenIcon Icon="people_outline" Style="margin-top: 20px; width: 48px; height: 48px; font-size: 48px; color: var(--rz-text-title-color);"></RadzenIcon>
                    <RadzenText Text="Radzen Community" TextStyle="Radzen.Blazor.TextStyle.DisplayH6" TagName="Radzen.Blazor.TagName.H3"></RadzenText>
                    <RadzenLink Text="Radzen Blazor Studio Forums" Path="https://forum.radzen.com/c/radzen-blazor-studio/12" Icon="east" Target="_blank" Style="font-size: 18px"></RadzenLink>
                </RadzenColumn>
            </RadzenRow>
        </RadzenCard> *@
    </RadzenColumn>
</RadzenRow>

@code {

    //Idea: save button to save settings to cookies

    RadzenScheduler<Marking> scheduler;
    RadzenYearPlannerView yearPlannerView;
    RadzenYearView yearView;

    IEnumerable<Country> _countries;
    IEnumerable<Country> _selectedPublicHolidayCountries;
    IEnumerable<Country> _selectedSchoolHolidayCountries;

    IEnumerable<Subdivision> _subdivisions;
    IEnumerable<Subdivision> _selectedPublicHolidaySubdivisions;
    IEnumerable<Subdivision> _selectedSchoolHolidaySubdivisions;

    List<Marking> _markings = [];

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        _countries = (await new RegionalApi().CountriesGetAsync("DE")).Select(country => new Country { Name = country.Name.First().Text, IsoCode = country.IsoCode }).ToList();
        _subdivisions = (await new RegionalApi().SubdivisionsGetAsync("DE", "DE")).Select(sub => new Subdivision { Name = sub.Name.First().Text, Category = sub.Category.First().Text, Code = sub.Code, IsoCode = sub.IsoCode }).ToList();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // _selectedPublicHolidayCountries = _countries.Where(x => x.IsoCode == "DE").ToList();
            // _selectedSchoolHolidayCountries = _countries.Where(x => x.IsoCode == "DE").ToList();

            await GetAllMarkings();
        }
    }

    private async Task GetAllMarkings()
    {
        _markings.Clear();

        //Public holidays
        if (_selectedPublicHolidayCountries != null)
            foreach (var country in _selectedPublicHolidayCountries)
            {
                var publicHolidays = await new HolidaysApi().PublicHolidaysGetAsync(country.IsoCode, scheduler.SelectedView.StartDate, scheduler.SelectedView.EndDate, "DE");
                if (_selectedPublicHolidaySubdivisions != null && _selectedPublicHolidaySubdivisions.Any())
                {
                    foreach (var publicHolidaySubdivision in _selectedPublicHolidaySubdivisions)
                    {
                        // ReSharper disable once ConditionIsAlwaysTrueOrFalse
                        foreach (var publicHoliday in from publicHoliday in publicHolidays where publicHoliday.Subdivisions != null from subdivisionReference in publicHoliday.Subdivisions where publicHolidaySubdivision.Code == subdivisionReference.Code select publicHoliday)
                        {
                            _markings.Add(new Marking
                            {
                                Start = publicHoliday.StartDate.Value,
                                End = publicHoliday.EndDate.Value.AddHours(23),
                                Name = publicHoliday.Name.First().Text,
                                Color = "background: blue"
                            });
                        }
                    }
                }

                _markings.AddRange(
                    from holiday in publicHolidays
                    where holiday.Nationwide.Value
                    select new Marking
                    {
                        Start = holiday.StartDate.Value,
                        End = holiday.EndDate.Value.AddHours(23),
                        Name = holiday.Name.First().Text,
                        Color = "background: red"
                    });
            }

        //School holidays
        if (_selectedSchoolHolidayCountries != null)
            foreach (var country in _selectedSchoolHolidayCountries)
            {
                var schoolHolidays = await new HolidaysApi().SchoolHolidaysGetAsync(country.IsoCode, scheduler.SelectedView.StartDate, scheduler.SelectedView.EndDate, "DE");
                if (_selectedSchoolHolidaySubdivisions != null && _selectedSchoolHolidaySubdivisions.Any())
                {
                    foreach (var schoolHolidaySubdivision in _selectedSchoolHolidaySubdivisions)
                    {
                        // ReSharper disable once ConditionIsAlwaysTrueOrFalse
                        foreach (var schoolHoliday in from schoolHoliday in schoolHolidays where schoolHoliday.Subdivisions != null from subdivisionReference in schoolHoliday.Subdivisions where schoolHolidaySubdivision.Code == subdivisionReference.Code select schoolHoliday)
                        {
                            _markings.Add(new Marking
                            {
                                Start = schoolHoliday.StartDate.Value,
                                End = schoolHoliday.EndDate.Value.AddHours(23),
                                Name = schoolHoliday.Name.First().Text,
                                Color = "background: yellow"
                            });
                        }
                    }
                }

                _markings.AddRange(
                    from holiday in schoolHolidays
                    where holiday.Nationwide.Value
                    select new Marking
                    {
                        Start = holiday.StartDate.Value,
                        End = holiday.EndDate.Value.AddHours(23),
                        Name = holiday.Name.First().Text,
                        Color = "background: orange"
                    });
            }

        await scheduler.Reload();
    }

    private void SlotRender(SchedulerSlotRenderEventArgs args)
    {
        if (args.Start < DateTime.Today)
        {
            args.Attributes["style"] = "background: rgba(0,0,0,.08);";
        }

        // Assuming _markings is accessible here. If not, you might need to pass it as a parameter or use another method to access it.
        DateTime date = args.Start.Date;
        int markingCount = _markings.Count(m => m.Start.Date <= date && m.End.Date >= date);

        // Define the color gradient from green to dark red
        string color = GetColorFromDensity(markingCount);

        if (markingCount > 0)
        {
            args.Attributes["style"] = $"background: {color};";
        }
    }

    // Function to map density to an rgba color
    private static string GetColorFromDensity(int density, int maxDensity = 13)
    {
        // Calculate the interpolation factor
        double factor = Math.Min((double)density / maxDensity, 1.0);

        // Interpolate between green and dark red
        int red = (int)(0 * (1 - factor) + 139 * factor);
        int green = (int)(255 * (1 - factor) + 0 * factor);
        int blue = (int)(0 * (1 - factor) + 0 * factor);

        // Alpha value calculation
        double alpha = 1; //+ (0.92 * factor); // From 0.08 to 1

        return $"rgba({red}, {green}, {blue}, .5)";
    }

    class Country
    {
        public string Name { get; init; }
        public string IsoCode { get; init; }
    }

    class Subdivision
    {
        public string Name { get; init; }
        public string Category { get; init; }
        public string Code { get; init; }
        public string IsoCode { get; init; }
    }

    class Marking
    {
        public DateTime Start { get; set; }
        public DateTime End { get; set; }

        public string Name { get; set; }

        public string Color { get; set; } = "background: blue";
    }

    private static void AppointmentRender(SchedulerAppointmentRenderEventArgs<Marking> args)
    {
        args.Attributes["style"] = args.Data.Color;
    }

}