@page "/"
@using System.Text
@using OpenHolidaysApi.Api

@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@inject DialogService DialogService
@inject ContextMenuService ContextMenuService
@inject TooltipService TooltipService
@inject NotificationService NotificationService
@inject Microsoft.Extensions.Localization.IStringLocalizer<Index> L

<PageTitle>Urlaubsplaner</PageTitle>

<RadzenRow Gap="5" RowGap="5">
    <RadzenColumn Size="12">
        <RadzenStack Gap="20px" JustifyContent="JustifyContent.Center">

            <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Center" Gap="20px" Wrap="FlexWrap.Wrap" AlignItems="AlignItems.Start">
                <RadzenStack AlignItems="AlignItems.Center">
                    <RadzenText Text="Bundesländer (Deutschland)" TextStyle="TextStyle.H6"></RadzenText>
                    <RadzenDropDown @bind-Value="_selectedSubdivisions" Data="_subdivisions" Change="GetAllMarkings" TextProperty="@nameof(Subdivision.Name)" Multiple="true" Chips="true" AllowClear="true" AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" Placeholder="Bundesländer auswählen" Style="width: 250px;" />
                </RadzenStack>

                <RadzenStack AlignItems="AlignItems.Center" Gap="0.5rem">
                    <RadzenText Text="Anzeigen" TextStyle="TextStyle.H6"></RadzenText>
                    <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center">
                        <RadzenCheckBox @bind-Value="_showPublicHolidays" TValue="bool" Change="GetAllMarkings" />
                        <RadzenLabel Text="Feiertage" />
                    </RadzenStack>
                    <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center">
                        <RadzenCheckBox @bind-Value="_showSchoolHolidays" TValue="bool" Change="GetAllMarkings" />
                        <RadzenLabel Text="Ferien" />
                    </RadzenStack>
                    <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center">
                        <RadzenCheckBox @bind-Value="_showBridgeDays" TValue="bool" Change="GetAllMarkings" />
                        <RadzenLabel Text="Brückentage" />
                    </RadzenStack>
                </RadzenStack>

                <RadzenStack AlignItems="AlignItems.Center">
                    <RadzenText Text="Zusätzliche Feiertage" TextStyle="TextStyle.H6"></RadzenText>
                    <RadzenDropDown @bind-Value="_selectedPublicHolidayCountries" Data="_additionalCountries" Change="GetAllMarkings" TextProperty="@nameof(Country.Name)" Multiple="true" Chips="true" AllowClear="true" AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" Placeholder="Länder auswählen" Style="width: 250px;" />
                </RadzenStack>

                <RadzenStack AlignItems="AlignItems.Center">
                    <RadzenText Text="Zusätzliche Ferien" TextStyle="TextStyle.H6"></RadzenText>
                    <RadzenDropDown @bind-Value="_selectedSchoolHolidayCountries" Data="_additionalCountries" Change="GetAllMarkings" TextProperty="@nameof(Country.Name)" Multiple="true" Chips="true" AllowClear="true" AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" Placeholder="Länder auswählen" Style="width: 250px;" />
                </RadzenStack>
            </RadzenStack>
            <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Center" Gap="20px" Wrap="FlexWrap.Wrap" AlignItems="AlignItems.Center">
                <RadzenStack AlignItems="AlignItems.Center">
                    <RadzenText Text="Urlaubstage" TextStyle="TextStyle.H6"></RadzenText>
                    <RadzenNumeric @bind-Value="_totalVacationDays" TValue="decimal" Change="@(async (args) => await scheduler.Reload())" Step="1" Style="width: 100px;" />
                </RadzenStack>
                <RadzenStack AlignItems="AlignItems.Center">
                    <RadzenText Text="Geplant" TextStyle="TextStyle.H6"></RadzenText>
                    <RadzenText Text="@_plannedDays.ToString()" />
                </RadzenStack>
                <RadzenStack AlignItems="AlignItems.Center">
                    <RadzenText Text="Verbleibend" TextStyle="TextStyle.H6"></RadzenText>
                    <RadzenText Text="@($"{(_totalVacationDays - _plannedDays)}")" Style="@(_totalVacationDays - _plannedDays < 0 ? "color: red;" : "")" />
                </RadzenStack>
                <RadzenStack AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center">
                    <RadzenSplitButton AlwaysOpenPopup="true" Text="Perfekten Urlaub vorschlagen" Icon="auto_awesome" ButtonStyle="ButtonStyle.Primary" Click="@(args => SuggestPerfectVacationWithOptions(args))">
                        <ChildContent>
                            <RadzenSplitButtonItem Text="Vollständige Neuplanung (überschreibt Auswahl)" Icon="autorenew" Value="overwrite" />
                            <RadzenSplitButtonItem Text="Bestehende Auswahl erweitern" Icon="add" Value="extend" />
                            <RadzenSplitButtonItem Text="Restliches Jahr planen" Icon="clock_arrow_down" Value="rest_of_year" />
                        </ChildContent>
                    </RadzenSplitButton>
                </RadzenStack>
                <RadzenStack AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center">
                    <RadzenButton Text="Planung zurücksetzen" Icon="delete_sweep" ButtonStyle="ButtonStyle.Light" Click="ClearAllSelections" />
                </RadzenStack>
                <RadzenStack AlignItems="AlignItems.Center" Gap="0.5rem">
                    <RadzenText Text="Zählweise" TextStyle="TextStyle.H6"></RadzenText>
                    <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center">
                        <RadzenCheckBox @bind-Value="_countWeekendsAndHolidays" TValue="bool" Change="@OnCountWorkdaysOptionChanged" />
                        <RadzenLabel Text="Wochenende/Feiertage als Arbeitstage" />
                    </RadzenStack>
                    <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center">
                        <RadzenCheckBox @bind-Value="_halfDaysChristmas" TValue="bool" Change="@OnHalfDaysChristmasChanged" />
                        <RadzenLabel Text="Tage zw. Weihnachten & Neujahr als halbe Tage" />
                    </RadzenStack>
                </RadzenStack>
            </RadzenStack>

            <RadzenScheduler @ref="scheduler" TItem="Marking" SlotRender="SlotRender" SlotSelect="SlotSelect" LoadData="LoadData" style="height: 800px;" StartProperty="Start" EndProperty="End" TextProperty="Name">
                <RadzenYearPlannerView @ref="yearPlannerView"></RadzenYearPlannerView>
                <RadzenYearView @ref="yearView"></RadzenYearView>
            </RadzenScheduler>
        </RadzenStack>
    </RadzenColumn>
</RadzenRow>

@code {

    public enum MarkingType
    {
        PublicHoliday,
        SchoolHoliday,
        Selected,
        BridgeDay
    }

    //Idea: save button to save settings to cookies

    RadzenScheduler<Marking> scheduler;
    RadzenYearPlannerView yearPlannerView;
    RadzenYearView yearView;

    IEnumerable<Country> _additionalCountries;
    IEnumerable<Country> _selectedPublicHolidayCountries;
    IEnumerable<Country> _selectedSchoolHolidayCountries;

    IEnumerable<Subdivision> _subdivisions;
    IEnumerable<Subdivision> _selectedSubdivisions;

    bool _showPublicHolidays = true;
    bool _showSchoolHolidays = true;
    bool _showBridgeDays;
    bool _countWeekendsAndHolidays;
    bool _halfDaysChristmas;

    decimal _totalVacationDays = 25m;
    decimal _plannedDays;

    readonly List<Marking> _markings = [];
    readonly List<Marking> _selectedSlots = [];

    /// <inheritdoc />
    protected override async Task OnInitializedAsync()
    {
        var allCountries = (await new RegionalApi().CountriesGetAsync("DE")).Select(country => new Country { Name = country.Name.First().Text, IsoCode = country.IsoCode }).ToList();
        _additionalCountries = allCountries.Where(c => c.IsoCode != "DE").ToList();
        _subdivisions = (await new RegionalApi().SubdivisionsGetAsync("DE", "DE")).Select(sub => new Subdivision { Name = sub.Name.First().Text, Category = sub.Category.First().Text, Code = sub.Code, IsoCode = sub.IsoCode }).ToList();
    }

    /// <inheritdoc />
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        var mobile = await JSRuntime.InvokeAsync<bool>("isDevice");

        if (mobile)
        {
            await scheduler.SelectView(yearView);
        }
    }

    private async Task GetAllMarkings()
    {
        _markings.Clear();

        // German holidays from selected subdivisions
        if (_selectedSubdivisions != null && _selectedSubdivisions.Any())
        {
            if (_showPublicHolidays)
            {
                var publicHolidays = await new HolidaysApi().PublicHolidaysGetAsync("DE", scheduler.SelectedView.StartDate, scheduler.SelectedView.EndDate, "DE");

                // Add nationwide holidays first
                var nationwidePublicHolidays = publicHolidays.Where(p => p.Nationwide == true);
                foreach (var holiday in nationwidePublicHolidays)
                {
                    _markings.Add(new Marking
                    {
                        Start = holiday.StartDate.Value,
                        End = holiday.EndDate.Value.AddHours(23),
                        Name = holiday.Name.First().Text + " (Bundesweit)",
                        Color = "background: red",
                        Type = MarkingType.PublicHoliday
                    });
                }

                // Then add state-specific holidays
                foreach (var subdivision in _selectedSubdivisions)
                {
                    var stateSpecificPublicHolidays = publicHolidays
                        .Where(p => p.Subdivisions != null && p.Subdivisions.Any(s => s.Code.Contains(subdivision.Code)));

                    foreach (var holiday in stateSpecificPublicHolidays)
                    {
                        _markings.Add(new Marking
                        {
                            Start = holiday.StartDate.Value,
                            End = holiday.EndDate.Value.AddHours(23),
                            Name = holiday.Name.First().Text + $" - {subdivision.Name}",
                            Color = "background: blue",
                            Type = MarkingType.PublicHoliday
                        });
                    }
                }
            }

            if (_showSchoolHolidays)
            {
                var schoolHolidays = await new HolidaysApi().SchoolHolidaysGetAsync("DE", scheduler.SelectedView.StartDate, scheduler.SelectedView.EndDate, "DE");
                foreach (var subdivision in _selectedSubdivisions)
                {
                    var stateSchoolHolidays = schoolHolidays
                        .Where(sh => sh.Subdivisions != null && sh.Subdivisions.Any(s => s.Code.Contains(subdivision.Code)));

                    foreach (var schoolHoliday in stateSchoolHolidays)
                    {
                        _markings.Add(new Marking
                        {
                            Start = schoolHoliday.StartDate.Value,
                            End = schoolHoliday.EndDate.Value.AddHours(23),
                            Name = schoolHoliday.Name.First().Text + $" - {subdivision.Name}",
                            Color = "background: yellow",
                            Type = MarkingType.SchoolHoliday
                        });
                    }
                }
            }
        }

        // Public holidays for additional countries
        if (_showPublicHolidays && _selectedPublicHolidayCountries != null)
        {
            foreach (var country in _selectedPublicHolidayCountries)
            {
                var publicHolidays = await new HolidaysApi().PublicHolidaysGetAsync(country.IsoCode, scheduler.SelectedView.StartDate, scheduler.SelectedView.EndDate, "DE");
                _markings.AddRange(
                    from holiday in publicHolidays
                    where holiday.Nationwide.Value
                    select new Marking
                    {
                        Start = holiday.StartDate.Value,
                        End = holiday.EndDate.Value.AddHours(23),
                        Name = holiday.Name.First().Text + $" - {country.Name}",
                        Color = "background: red",
                        Type = MarkingType.PublicHoliday
                    });
            }
        }

        // School holidays for additional countries
        if (_showSchoolHolidays && _selectedSchoolHolidayCountries != null)
        {
            foreach (var country in _selectedSchoolHolidayCountries)
            {
                var schoolHolidays = await new HolidaysApi().SchoolHolidaysGetAsync(country.IsoCode, scheduler.SelectedView.StartDate, scheduler.SelectedView.EndDate, "DE");
                _markings.AddRange(
                    from holiday in schoolHolidays
                    select new Marking
                    {
                        Start = holiday.StartDate.Value,
                        End = holiday.EndDate.Value.AddHours(23),
                        Name = holiday.Name.First().Text + $" - {country.Name}",
                        Color = "background: orange",
                        Type = MarkingType.SchoolHoliday
                    });
            }
        }

        if (_showBridgeDays)
        {
            var nonWorkDays = new HashSet<DateTime>();
            var publicHolidays = _markings.Where(m => m.Type == MarkingType.PublicHoliday)
                                          .SelectMany(m => Enumerable.Range(0, (m.End.Date - m.Start.Date).Days + 1)
                                          .Select(offset => m.Start.Date.AddDays(offset)))
                                          .ToHashSet();

            for (var date = scheduler.SelectedView.StartDate; date <= scheduler.SelectedView.EndDate; date = date.AddDays(1))
            {
                if (date.DayOfWeek == DayOfWeek.Saturday || date.DayOfWeek == DayOfWeek.Sunday || publicHolidays.Contains(date.Date))
                {
                    nonWorkDays.Add(date.Date);
                }
            }

            var bridgeDaysToAdd = new List<Marking>();
            for (var date = scheduler.SelectedView.StartDate; date <= scheduler.SelectedView.EndDate; date = date.AddDays(1))
            {
                if (nonWorkDays.Contains(date.Date)) continue;

                DateTime prevNonWorkDay = date.AddDays(-1);
                while (!nonWorkDays.Contains(prevNonWorkDay.Date) && prevNonWorkDay >= scheduler.SelectedView.StartDate) prevNonWorkDay = prevNonWorkDay.AddDays(-1);

                DateTime nextNonWorkDay = date.AddDays(1);
                while (!nonWorkDays.Contains(nextNonWorkDay.Date) && nextNonWorkDay <= scheduler.SelectedView.EndDate) nextNonWorkDay = nextNonWorkDay.AddDays(1);

                bool prevIsWeekend = prevNonWorkDay.DayOfWeek is DayOfWeek.Saturday or DayOfWeek.Sunday;
                bool nextIsWeekend = nextNonWorkDay.DayOfWeek is DayOfWeek.Saturday or DayOfWeek.Sunday;
                bool prevIsHoliday = publicHolidays.Contains(prevNonWorkDay.Date);
                bool nextIsHoliday = publicHolidays.Contains(nextNonWorkDay.Date);

                if (!((prevIsWeekend && nextIsHoliday) || (prevIsHoliday && nextIsWeekend))) continue;

                var gap = (nextNonWorkDay - prevNonWorkDay).Days - 1;
                if (gap is > 0 and <= 2)
                {
                    for (int i = 1; i <= gap; i++)
                    {
                        var bridgeDay = prevNonWorkDay.AddDays(i);
                        if (bridgeDaysToAdd.All(b => b.Start.Date != bridgeDay.Date))
                        {
                            bridgeDaysToAdd.Add(new Marking { Start = bridgeDay, End = bridgeDay, Name = "Brückentag", Type = MarkingType.BridgeDay });
                        }
                    }
                }
            }
            _markings.AddRange(bridgeDaysToAdd);
        }


        // Remove duplicates that might be added (e.g. nationwide holidays)
        var distinctMarkings = _markings.GroupBy(m => (Date: m.Start.Date, m.End.Date, m.Name)).Select(g => g.First()).ToList();
        _markings.Clear();
        _markings.AddRange(distinctMarkings);


        if (!_markings.Any())
        {
            await scheduler.Reload();
            return;
        }

        var dailyMarkings = new Dictionary<DateTime, int>();

        foreach (var marking in _markings)
        {
            var current = marking.Start.Date;
            var end = marking.End.Date;

            while (current <= end)
            {
                dailyMarkings.TryAdd(current, 0);
                dailyMarkings[current]++;
                current = current.AddDays(1);
            }
        }

        _maxDensity = dailyMarkings.Values.Any() ? dailyMarkings.Values.Max() : 5;

        if (_maxDensity <= 3) _maxDensity = 5;

        await scheduler.Reload();
    }

    int _maxDensity = 16;

    private async Task OnCountWorkdaysOptionChanged(bool value)
    {
        _countWeekendsAndHolidays = value;
        UpdatePlannedDays();
        await scheduler.Reload();
    }

    private async Task OnHalfDaysChristmasChanged(bool value)
    {
        _halfDaysChristmas = value;
        UpdatePlannedDays();
        await scheduler.Reload();
    }

    private bool IsBetweenChristmasAndNewYear(DateTime date) => date is { Month: 12, Day: >= 24 and <= 31 };

    private void UpdatePlannedDays()
    {
        _plannedDays = 0m;
        var publicHolidayDates = new HashSet<DateTime>();

        if (!_countWeekendsAndHolidays)
        {
            publicHolidayDates = _markings
                .Where(m => m.Type == MarkingType.PublicHoliday)
                .SelectMany(m => Enumerable.Range(0, (m.End.Date - m.Start.Date).Days + 1)
                                          .Select(offset => m.Start.Date.AddDays(offset)))
                .ToHashSet();
        }

        var distinctSelectedDays = _selectedSlots.Select(s => s.Start.Date).ToHashSet();

        foreach (var day in distinctSelectedDays)
        {
            decimal dayCost = _halfDaysChristmas && IsBetweenChristmasAndNewYear(day) ? 0.5m : 1.0m;

            if (_countWeekendsAndHolidays)
            {
                _plannedDays += dayCost;
            }
            else
            {
                bool isWeekend = day.DayOfWeek is DayOfWeek.Saturday or DayOfWeek.Sunday;
                bool isPublicHoliday = publicHolidayDates.Contains(day);
                if (!isWeekend && !isPublicHoliday)
                {
                    _plannedDays += dayCost;
                }
            }
        }
    }

    private void SlotRender(SchedulerSlotRenderEventArgs args)
    {
        var date = args.Start.Date;
        string bgColor = "";
        var bgImages = new List<string>();
        string additionalStyles = "";

        // Darker overlay for past days
        if (args.Start < DateTime.Today)
        {
            additionalStyles += "box-shadow: inset 0 0 0 1000px rgba(0,0,0,.15);";
        }

        // Base color for weekends
        if (date.DayOfWeek == DayOfWeek.Saturday || date.DayOfWeek == DayOfWeek.Sunday)
        {
            bgColor = "background-color: rgba(220, 230, 255, 0.7);";
        }

        // Density color for holidays/vacations
        var markingCount = _markings.Count(m => m.Start.Date <= date && date <= m.End.Date && m.Type != MarkingType.BridgeDay);
        if (markingCount > 0)
        {
            bgColor = $"background-color: {GetColorFromDensity(markingCount)};";
        }

        // Selection cross
        if (_selectedSlots.Any(x => x.Start.Date == date))
        {
            string strokeColor = "black";
            if (_plannedDays > _totalVacationDays)
            {
                strokeColor = "red";
            }
            else if (!_countWeekendsAndHolidays)
            {
                bool isWeekend = date.DayOfWeek == DayOfWeek.Saturday || date.DayOfWeek == DayOfWeek.Sunday;
                bool isPublicHoliday = _markings.Any(m => m.Type == MarkingType.PublicHoliday && m.Start.Date <= date && date <= m.End.Date);
                if (isWeekend || isPublicHoliday)
                {
                    strokeColor = "grey";
                }
            }

            string svgCross = $"<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 10 10'><line x1='0' y1='0' x2='10' y2='10' stroke='{strokeColor}' stroke-width='1'/><line x1='0' y1='10' x2='10' y2='0' stroke='{strokeColor}' stroke-width='1'/></svg>";
            var base64Svg = Convert.ToBase64String(Encoding.UTF8.GetBytes(svgCross));
            bgImages.Add($"url('data:image/svg+xml;base64,{base64Svg}')");
        }

        // Bridge day arrow
        var bridgeDayMarking = _markings.FirstOrDefault(m => m.Type == MarkingType.BridgeDay && m.Start.Date == date);
        if (bridgeDayMarking != null)
        {
            var arrowSvg = date.DayOfWeek switch
            {
                DayOfWeek.Monday or DayOfWeek.Tuesday => "<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 10 10'><polygon points='5,0 0,5 5,10' style='fill:orange;'/></svg>",
                DayOfWeek.Thursday or DayOfWeek.Friday => "<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 10 10'><polygon points='5,0 10,5 5,10' style='fill:orange;'/></svg>",
                _ => ""
            };
            if (!string.IsNullOrEmpty(arrowSvg))
            {
                var base64Svg = Convert.ToBase64String(Encoding.UTF8.GetBytes(arrowSvg));
                bgImages.Add($"url('data:image/svg+xml;base64,{base64Svg}')");
                bgColor = "background-color: rgba(255, 255, 0, 0.3);";
            }
        }

        // Build final style attribute
        args.Attributes["style"] = bgColor + additionalStyles;
        if (bgImages.Any())
        {
            args.Attributes["style"] += $"background-image: {string.Join(", ", bgImages)}; background-repeat: no-repeat; background-position: center; background-size: contain;";
        }
    }

    private async Task SlotSelect(SchedulerSlotSelectEventArgs args)
    {
        args.PreventDefault();

        var mark = new Marking
            {
                Start = args.Start,
                End = args.Start.AddDays(1), // Correctly handle the end date for single-day selection
                Name = "Selected",
                Type = MarkingType.Selected
            };

        var existingMark = _selectedSlots.FirstOrDefault(m => m.Start.Date == args.Start.Date);

        if (existingMark != null)
        {
            _selectedSlots.Remove(existingMark);
        }
        else
        {
            _selectedSlots.Add(mark);
        }
        UpdatePlannedDays();
        await scheduler.Reload();
    }

    private string GetColorFromDensity(int density)
    {
        // Calculate the interpolation factor
        var factor = Math.Min((double)density / _maxDensity, 1.0);

        int red, green;

        if (factor <= 0.5)
        {
            // Interpolate between green and yellow
            var localFactor = factor / 0.5;
            red = (int)(0 * (1 - localFactor) + 255 * localFactor);
            green = 255;
        }
        else
        {
            // Interpolate between yellow and red
            var localFactor = (factor - 0.5) / 0.5;
            red = (int)(255 * (1 - localFactor) + 255 * localFactor);
            green = (int)(255 * (1 - localFactor) + 0 * localFactor);
        }

        return $"rgba({red}, {green}, 0, .5)";
    }

    class Country
    {
        public string Name { get; init; }
        public string IsoCode { get; init; }
    }

    class Subdivision
    {
        public string Name { get; init; }
        public string Category { get; init; }
        public string Code { get; init; }
        public string IsoCode { get; init; }
    }

    class Marking
    {
        public DateTime Start { get; init; }
        public DateTime End { get; init; }

        public string Name { get; init; }

        public string Color { get; set; } = "background: blue";
        public MarkingType Type { get; set; }

        public override bool Equals(object obj)
        {
            if (obj is Marking other)
            {
                return Start.Date == other.Start.Date && End.Date == other.End.Date && Name == other.Name && Type == other.Type;
            }
            return false;
        }

        public override int GetHashCode()
        {
            return HashCode.Combine(Start.Date, End.Date, Name, Type);
        }
    }

    int _year = DateTime.Now.Year;
    private async Task LoadData(SchedulerLoadDataEventArgs args)
    {
        var middle = FindMiddleDateTime(args.Start, args.End).Year;
        if (_year == middle) return;

        _year = middle;
        await GetAllMarkings();
    }

    static DateTime FindMiddleDateTime(DateTime dt1, DateTime dt2) => dt1 + new TimeSpan((dt2 - dt1).Ticks / 2);

    async Task SuggestPerfectVacationWithOptions(RadzenSplitButtonItem args)
    {
        bool overwrite = false;
        bool planFromToday = false;

        switch (args.Value)
        {
            case "overwrite":
                overwrite = true;
                break;
            case "extend":
                overwrite = false;
                break;
            case "rest_of_year":
                overwrite = false;
                planFromToday = true;
                break;
        }

        if (_selectedSubdivisions == null || !_selectedSubdivisions.Any())
        {
            NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Warning, Summary = "Hinweis", Detail = "Bitte wählen Sie mindestens ein Bundesland aus.", Duration = 4000 });
            return;
        }

        decimal vacationDaysToPlan = overwrite ? _totalVacationDays : _totalVacationDays - _plannedDays;

        if (vacationDaysToPlan <= 0)
        {
            NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Warning, Summary = "Hinweis", Detail = "Die Anzahl der zu planenden Urlaubstage muss größer als 0 sein.", Duration = 4000 });
            return;
        }

        var year = FindMiddleDateTime(scheduler.SelectedView.StartDate, scheduler.SelectedView.EndDate).Year;
        var startDate = planFromToday ? new DateTime(DateTime.Now.Year, DateTime.Now.Month, DateTime.Now.Day) : new DateTime(year, 1, 1);
        var endDate = new DateTime(year, 12, 31);

        var publicHolidaysResponse = await new HolidaysApi().PublicHolidaysGetAsync("DE", startDate, endDate, "DE");
        var holidaysForStates = publicHolidaysResponse
            .Where(p => p.Nationwide == true || (p.Subdivisions != null && p.Subdivisions.Any(s => _selectedSubdivisions.Any(sub => sub.Code == s.Code))))
            .SelectMany(h => Enumerable.Range(0, (h.EndDate.Value.Date - h.StartDate.Value.Date).Days + 1).Select(offset => h.StartDate.Value.Date.AddDays(offset)))
            .ToHashSet();

        var nonWorkDays = new HashSet<DateTime>();
        for (var date = startDate; date <= endDate; date = date.AddDays(1))
        {
            if (date.DayOfWeek == DayOfWeek.Saturday || date.DayOfWeek == DayOfWeek.Sunday || holidaysForStates.Contains(date))
            {
                nonWorkDays.Add(date);
            }
        }

        var opportunities = new List<BridgeOpportunity>();
        var currentDate = startDate;
        while (currentDate <= endDate)
        {
            if (!nonWorkDays.Contains(currentDate))
            {
                var periodStart = currentDate;
                var beforePeriod = periodStart.AddDays(-1);

                if (nonWorkDays.Contains(beforePeriod) || periodStart == startDate)
                {
                    var workDays = new List<DateTime>();
                    var tempDate = periodStart;
                    while (!nonWorkDays.Contains(tempDate) && tempDate <= endDate)
                    {
                        workDays.Add(tempDate);
                        tempDate = tempDate.AddDays(1);
                    }

                    var afterPeriod = tempDate;
                    if (nonWorkDays.Contains(afterPeriod) || afterPeriod > endDate)
                    {
                        var freeDaysBefore = 0;
                        var checkDateBefore = beforePeriod;
                        while (nonWorkDays.Contains(checkDateBefore))
                        {
                            freeDaysBefore++;
                            checkDateBefore = checkDateBefore.AddDays(-1);
                        }

                        var freeDaysAfter = 0;
                        var checkDateAfter = afterPeriod;
                        while (nonWorkDays.Contains(checkDateAfter))
                        {
                            freeDaysAfter++;
                            checkDateAfter = checkDateAfter.AddDays(1);
                        }

                        decimal cost = workDays.Sum(day => _halfDaysChristmas && IsBetweenChristmasAndNewYear(day) ? 0.5m : 1.0m);

                        opportunities.Add(new BridgeOpportunity
                        {
                            VacationDays = workDays,
                            FreeDaysGained = workDays.Count + freeDaysBefore + freeDaysAfter,
                            Cost = cost
                        });
                    }
                    currentDate = tempDate;
                    continue;
                }
            }
            currentDate = currentDate.AddDays(1);
        }

        var sortedOpportunities = opportunities
            .Where(o => o.VacationDays.Any())
            .OrderByDescending(o => o.Efficiency)
            .ThenBy(o => o.Cost)
            .ToList();

        if (!overwrite)
        {
            var selectedDates = _selectedSlots.Select(s => s.Start.Date).ToHashSet();
            sortedOpportunities.RemoveAll(op => op.VacationDays.Any(d => selectedDates.Contains(d)));
        }

        var selectedOpportunities = new List<BridgeOpportunity>();
        decimal remainingVacationDays = vacationDaysToPlan;

        foreach (var op in sortedOpportunities.Where(op => op.Cost <= remainingVacationDays))
        {
            selectedOpportunities.Add(op);
            remainingVacationDays -= op.Cost;
        }

        if (selectedOpportunities.Any())
        {
            var suggestionBlocks = selectedOpportunities.Select(op => new VacationSuggestionBlock
            {
                VacationDays = op.VacationDays,
                FreeDaysGained = op.FreeDaysGained
            }).ToList();

            var result = await DialogService.OpenAsync<SuggestionDialog>("Optimaler Urlaubsplan",
                new Dictionary<string, object> { { "SuggestionBlocks", suggestionBlocks } },
                new DialogOptions { Width = "90vw", Height = "auto", Resizable = true, Draggable = true });

            if (result == true)
            {
                if (overwrite)
                {
                    _selectedSlots.Clear();
                }
                var allSuggestedDays = suggestionBlocks.SelectMany(b => b.VacationDays);
                foreach (var day in allSuggestedDays)
                {
                    if (_selectedSlots.All(s => s.Start.Date != day.Date))
                    {
                        _selectedSlots.Add(new Marking { Start = day.Date, End = day.Date.AddDays(1), Name = "Selected", Type = MarkingType.Selected });
                    }
                }

                UpdatePlannedDays();
                await scheduler.Reload();
            }
        }
        else
        {
            NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Info, Summary = "Kein Vorschlag", Detail = "Es konnten keine Brückentage für eine optimale Planung gefunden werden.", Duration = 4000 });
        }
    }

    async Task ClearAllSelections()
    {
        _selectedSlots.Clear();
        UpdatePlannedDays();
        await scheduler.Reload();
        NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Info, Summary = "Erfolgreich", Detail = "Alle geplanten Urlaubstage wurden entfernt.", Duration = 4000 });
    }

    public class VacationSuggestionBlock
    {
        public List<DateTime> VacationDays { get; set; }
        public int FreeDaysGained { get; set; }
    }

    class BridgeOpportunity
    {
        public List<DateTime> VacationDays { get; set; } = [];
        public int FreeDaysGained { get; set; }
        public decimal Cost { get; set; }
        public double Efficiency => Cost > 0 ? FreeDaysGained / (double)Cost : 0;
    }

}