@page "/"
@using OpenHolidaysApi.Api
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@inject DialogService DialogService
@inject ContextMenuService ContextMenuService
@inject TooltipService TooltipService
@inject NotificationService NotificationService
@inject Microsoft.Extensions.Localization.IStringLocalizer<Index> L
<PageTitle>Index</PageTitle>
<RadzenRow Gap="5" RowGap="5">
    <RadzenColumn Size="12">
        <RadzenText Text="Welcome to your new app" TextStyle="TextStyle.DisplayH2" TagName="TagName.Auto"></RadzenText>
        <RadzenLabel Text="Feiertage"></RadzenLabel>
        <RadzenDropDown @bind-Value="_selectedPublicHolidayCountries" Data="_countries" SelectedItemChanged="GetAllMarkings" Change="GetAllMarkings" TextProperty="@nameof(Country.Name)" Multiple="true" Chips="true" AllowClear="true" AllowFiltering="true" Placeholder="Feiertage" FilterPlaceholder="Deutschland" /><RadzenLabel Text="Feiertage"></RadzenLabel>
        <RadzenLabel Text="Bundesland"></RadzenLabel>
        <RadzenDropDown @bind-Value="_selectedPublicHolidaySubdivisions" Data="_subdivisions" SelectedItemChanged="GetAllMarkings" TextProperty="@nameof(Subdivision.Name)" Multiple="true" Chips="true" AllowClear="true" AllowFiltering="true" Placeholder="Feiertage" FilterPlaceholder="Deutschland" />

        <RadzenLabel Text="Ferien"></RadzenLabel>
        <RadzenDropDown @bind-Value="_selectedSchoolHolidayCountries" Data="_countries" SelectedItemChanged="GetAllMarkings" TextProperty="@nameof(Country.Name)" Multiple="true" Chips="true" AllowClear="true" AllowFiltering="true" Placeholder="Ferien" FilterPlaceholder="Deutschland" />
        <RadzenLabel Text="Bundesland"></RadzenLabel>
        <RadzenDropDown @bind-Value="_selectedSchoolHolidaySubdivisions" Data="_subdivisions" SelectedItemChanged="GetAllMarkings" TextProperty="@nameof(Subdivision.Name)" Multiple="true" Chips="true" AllowClear="true" AllowFiltering="true" Placeholder="Ferien" FilterPlaceholder="Deutschland" />

        <RadzenScheduler @ref="scheduler" Data="_markings" TItem="Marking" SlotRender="SlotRender" style="height: 800px;" StartProperty="Start" EndProperty="End" TextProperty="Name">
            <RadzenYearPlannerView @ref="yearPlannerView"></RadzenYearPlannerView>
            <RadzenYearView @ref="yearView"></RadzenYearView>
        </RadzenScheduler>

        @* <RadzenCard Style="margin-top: 40px; padding: 20px 40px 40px;">
            <RadzenRow>
                <RadzenColumn Size="12" SizeMD="4">
                    <RadzenIcon Icon="smart_button" Style="margin-top: 20px; width: 48px; height: 48px; font-size: 48px; color: var(--rz-text-title-color);"></RadzenIcon>
                    <RadzenText Text="Learn the Fundamentals" TextStyle="Radzen.Blazor.TextStyle.DisplayH6" TagName="Radzen.Blazor.TagName.H3"></RadzenText>
                    <RadzenLink Text="Docs" Path="https://www.radzen.com/blazor-studio/documentation/" Icon="east" Target="_blank" Style="font-size: 18px"></RadzenLink>
                    <RadzenLink Text="Videos" Path="https://youtube.com/playlist?list=PLQyJPeb3xHcBij_RbHD__2TOo8Jv5HQVc" Icon="east" Target="_blank" Style="display: block; font-size: 18px"></RadzenLink>
                </RadzenColumn>
                <RadzenColumn Size="12" SizeMD="4">
                    <RadzenIcon Icon="code" Style="margin-top: 20px; width: 48px; height: 48px; font-size: 48px; color: var(--rz-text-title-color);"></RadzenIcon>
                    <RadzenText Text="Radzen Blazor Components" TextStyle="Radzen.Blazor.TextStyle.DisplayH6" TagName="Radzen.Blazor.TagName.H3"></RadzenText>
                    <RadzenLink Text="Demos" Path="https://blazor.radzen.com" Icon="east" Target="_blank" Style="font-size: 18px"></RadzenLink>
                </RadzenColumn>
                <RadzenColumn Size="12" SizeMD="4">
                    <RadzenIcon Icon="people_outline" Style="margin-top: 20px; width: 48px; height: 48px; font-size: 48px; color: var(--rz-text-title-color);"></RadzenIcon>
                    <RadzenText Text="Radzen Community" TextStyle="Radzen.Blazor.TextStyle.DisplayH6" TagName="Radzen.Blazor.TagName.H3"></RadzenText>
                    <RadzenLink Text="Radzen Blazor Studio Forums" Path="https://forum.radzen.com/c/radzen-blazor-studio/12" Icon="east" Target="_blank" Style="font-size: 18px"></RadzenLink>
                </RadzenColumn>
            </RadzenRow>
        </RadzenCard> *@
    </RadzenColumn>
</RadzenRow>

@code {

    //Idea: save button to save settings to cookies

    RadzenScheduler<Marking> scheduler;
    RadzenYearPlannerView yearPlannerView;
    RadzenYearView yearView;

    IEnumerable<Country> _countries;
    IEnumerable<Country> _selectedPublicHolidayCountries = [];
    IEnumerable<Country> _selectedSchoolHolidayCountries = [];

    IEnumerable<Subdivision> _subdivisions;
    IEnumerable<Subdivision> _selectedPublicHolidaySubdivisions = [];
    IEnumerable<Subdivision> _selectedSchoolHolidaySubdivisions = [];

    List<Marking> _markings = [];

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        _countries = (await new RegionalApi().CountriesGetAsync("DE")).Select(country => new Country { Name = country.Name.First().Text, IsoCode = country.IsoCode }).ToList();
        _subdivisions = (await new RegionalApi().SubdivisionsGetAsync("DE", "DE")).Select(sub => new Subdivision { Name = sub.Name.First().Text, Category = sub.Category.First().Text, Code = sub.Code, IsoCode = sub.IsoCode }).ToList();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // _selectedPublicHolidayCountries = _countries.Where(x => x.IsoCode == "DE").ToList();
            // _selectedSchoolHolidayCountries = _countries.Where(x => x.IsoCode == "DE").ToList();

            await GetAllMarkings();
        }
    }

    private async Task GetAllMarkings()
    {
        _markings.Clear();

        foreach (var country in _selectedPublicHolidayCountries)
        {
            var publicHolidays = await new HolidaysApi().PublicHolidaysGetAsync(country.IsoCode, scheduler.SelectedView.StartDate, scheduler.SelectedView.EndDate, "DE");
            if (_selectedPublicHolidaySubdivisions.Any())
            {
                _markings.AddRange(
                    from subdivision in _selectedPublicHolidaySubdivisions
                    from holiday in publicHolidays
                    where holiday.Subdivisions.Any(y => y.Code == subdivision.Code)
                    select new Marking
                        {
                            Start = holiday.StartDate.Value,
                            End = holiday.EndDate.Value,
                            Name = holiday.Name.First().Text,
                            Color = "background: red"
                        }
                );
            }
            else
            {
                _markings.AddRange(
                    from holiday in publicHolidays
                    where holiday.Nationwide.Value
                    select new Marking
                        {
                            Start = holiday.StartDate.Value,
                            End = holiday.EndDate.Value,
                            Name = holiday.Name.First().Text,
                            Color = "background: red"
                        });
            }
        }

        await scheduler.Reload();
    }

    private static void SlotRender(SchedulerSlotRenderEventArgs args)
    {
        if (args.Start < DateTime.Today)
        {
            args.Attributes["style"] = "background: rgba(0,0,0,.08);";
        }
    }

    class Country
    {
        public string Name { get; init; }
        public string IsoCode { get; init; }
    }

    class Subdivision
    {
        public string Name { get; init; }
        public string Category { get; init; }
        public string Code { get; init; }
        public string IsoCode { get; init; }
    }

    class Marking
    {
        public DateTime Start { get; set; }
        public DateTime End { get; set; }

        public string Name { get; set; }

        public string Color { get; set; } = "background: blue";
    }
}